<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>归并排序</title>
    <url>/2023/03/26/Arithmetic_Merge_Sort/</url>
    <content><![CDATA[<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>归并排序(MERGE-SORT)是建立在归并操作上的一种有效的排序算法,该算法是采用分治法 (Divide and Conquer)的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序 列;即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二 路归并。 归并排序核心步骤:</p>
<p><a href="https://cloudimge.com/image/nacFm"><img src="https://c.1ovv.com/2023/03/26/nacFm.md.jpeg" alt="nacFm.md.jpeg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></a></p>
<h1 id="归并-递归"><a href="#归并-递归" class="headerlink" title="归并-递归"></a>归并-递归</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> left,<span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;=right)<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mid=left+right&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(a,left,mid);</span><br><span class="line">    <span class="built_in">merge_sort</span>(a,mid+<span class="number">1</span>,right);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i=left,j=mid+<span class="number">1</span>,k=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> index[right-left+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=right)</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;=a[j])index[k++]=a[i++];<span class="comment">//注意是小于等于哦</span></span><br><span class="line">        <span class="keyword">else</span> index[k++]=a[j++];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid)index[k++]=a[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=right)index[k++]=a[j++];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=left,k=<span class="number">0</span>;i&lt;=right;i++,k++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=index[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="归并-非递归"><a href="#归并-非递归" class="headerlink" title="归并-非递归"></a>归并-非递归</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeSortNonR</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span>* temp = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>) * n);</span><br><span class="line">	<span class="type">int</span> gap = <span class="number">1</span>;<span class="comment">//控制每组数据</span></span><br><span class="line">	<span class="keyword">while</span> (gap &lt; n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span> * gap)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//[i,i+gap-1][i+gap,i+2*gap-1]   每组gap个 i+gap刚好跳到下一组第一个，所以减一为上一组最后一个</span></span><br><span class="line">			<span class="comment">//归并</span></span><br><span class="line">			<span class="type">int</span> begin1 = i, end1 = i+gap<span class="number">-1</span>;</span><br><span class="line">			<span class="type">int</span> begin2 =i+gap, end2 = i+<span class="number">2</span>*gap<span class="number">-1</span>;</span><br><span class="line">			<span class="comment">//归并过程中，右半区间不存在</span></span><br><span class="line">			<span class="keyword">if</span> (begin2 &gt;= n)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="comment">//右半区间算多了</span></span><br><span class="line">			<span class="keyword">if</span> (end2 &gt;= n)</span><br><span class="line">				end2 = n - <span class="number">1</span>;</span><br><span class="line">			<span class="type">int</span> index = i;</span><br><span class="line">			<span class="keyword">while</span> (begin1 &lt;= end1 &amp;&amp; begin2 &lt;= end2) <span class="comment">//注意且不是或</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (a[begin1] &lt; a[begin2])</span><br><span class="line">				&#123;</span><br><span class="line">					temp[index++] = a[begin1++];</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					temp[index++] = a[begin2++];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">while</span> (begin1 &lt;= end1)</span><br><span class="line">			&#123;</span><br><span class="line">				temp[index++] = a[begin1++];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">while</span> (begin2 &lt;= end2)</span><br><span class="line">			&#123;</span><br><span class="line">				temp[index++] = a[begin2++];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//拷贝回去,为了保证不将越界拷贝进来（右半区间不存在，不完整，左半区间不完整等  在前面循环已经有序，故在原数组有序不用理会），故使用每次循环拷贝</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;=end2; j++)<span class="comment">//注意不能写begin1  毕竟前面在++</span></span><br><span class="line">			&#123;</span><br><span class="line">				a[j] = temp[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		gap *= <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Arithmetic</category>
      </categories>
      <tags>
        <tag>Arithmetic</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/2023/03/26/Alrithmetic_Binary_find/</url>
    <content><![CDATA[<h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>折半查找，每次一半查找。</p>
<h1 id="查找出现的第一个位置"><a href="#查找出现的第一个位置" class="headerlink" title="查找出现的第一个位置"></a>查找出现的第一个位置</h1><p><a href="https://cloudimge.com/image/nasys"><img src="https://c.1ovv.com/2023/03/26/nasys.md.jpeg" alt="nasys.md.jpeg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//check为某种约束条例，第一个check找的是右区间，寻找第一个x出现位置，第二个check寻找最后一个check</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> mid,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a[mid]&gt;=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Binary_find</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">   &#123;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(a,mid,x))r=mid;</span><br><span class="line">        <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="查找出现的最后一个位置"><a href="#查找出现的最后一个位置" class="headerlink" title="查找出现的最后一个位置"></a>查找出现的最后一个位置</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check1</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> mid,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a[mid]&lt;=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Binary_find1</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">   &#123;</span><br><span class="line">        <span class="type">int</span> mid=l+r+<span class="number">1</span>&gt;&gt;<span class="number">1</span>;<span class="comment">//如果不加1会死循环，例如l=r-1，则mid=l;那么更新l则会是l=l;会死循环</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check1</span>(a,mid,x))l=mid;</span><br><span class="line">        <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Arithmetic</category>
      </categories>
      <tags>
        <tag>Arithmetic</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/2023/03/25/Arithmetic_Quick_Sort/</url>
    <content><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>快速排序是Hoare于1962年提出的一种二叉树结构的交换排序方法，其基本思想为:任取待排序 元素序列中的某元素作为基准值，按照该排序码将待排序集合分割成两子序列，左子序列中所有 元素均小于基准值，右子序列中所有元素均大于基准值，然后最左右子序列重复该过程，直到所 有元素都排列在相应位置上为止。<br><strong>将区间按照基准值划分为左右两半部分的常见方式有:</strong></p>
<p><strong>1.挖坑法 2.左右指针法 3.前后指针法</strong></p>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p><strong>O(N*log 	N)</strong></p>
<p><a href="https://cloudimge.com/image/nzVKR"><img src="https://c.1ovv.com/2023/03/25/nzVKR.md.jpeg" alt="nzVKR.md.jpeg" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></a></p>
<h1 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h1><p>不稳定排序</p>
<h1 id="挖坑法"><a href="#挖坑法" class="headerlink" title="挖坑法"></a>挖坑法</h1><p><a href="https://cloudimge.com/image/nzdjd"><img src="https://c.1ovv.com/2023/03/25/nzdjd.md.png" alt="nzdjd.md.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></a></p>
<p>先讲左端或右端的值设定为key,key右边的值比key大，左边的值比key小，也就是说end–的行动方式为&gt;a[key]，同理左边的行动方式为&lt;a[key]</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//挖坑法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">PartSort1</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//将中间值置换到begin位置，解决有序最坏的情况</span></span><br><span class="line">	<span class="type">int</span> mid = <span class="built_in">GetMidIndex</span>(a, left, right);</span><br><span class="line">	<span class="built_in">swap</span>(a[left], a[mid]);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> begin = left, end = right;</span><br><span class="line">	<span class="type">int</span> key = a[begin];</span><br><span class="line">	<span class="type">int</span> pivot = begin;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (begin &lt; end)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//右边找小，放到左边</span></span><br><span class="line">		<span class="keyword">while</span> (a[end] &gt;= key &amp;&amp; begin &lt; end)<span class="comment">//判断范围加全，避免在--的过程中，end&lt;begin 注意是&gt;=  ＝一定要加上不然容易死循环</span></span><br><span class="line">		&#123;</span><br><span class="line">			end--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//小的放到左边坑位，自己形成新的坑位</span></span><br><span class="line">		a[pivot] = a[end];</span><br><span class="line">		pivot = end;</span><br><span class="line">		<span class="comment">//左边找大，放到右边</span></span><br><span class="line">		<span class="keyword">while</span> (a[begin] &lt;= key &amp;&amp; begin &lt; end)</span><br><span class="line">		&#123;</span><br><span class="line">			begin++;</span><br><span class="line">		&#125;</span><br><span class="line">		a[pivot] = a[begin];</span><br><span class="line">		pivot = begin;</span><br><span class="line">	&#125;</span><br><span class="line">	pivot = begin;</span><br><span class="line">	a[begin] = key;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> pivot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="前后指针法"><a href="#前后指针法" class="headerlink" title="前后指针法"></a>前后指针法</h1><p><a href="https://cloudimge.com/image/nzfL4"><img src="https://c.1ovv.com/2023/03/25/nzfL4.md.png" alt="nzfL4.md.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前后指针法 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">PartSort3</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> prev = left, cur = left + <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> keyi = left;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (cur &lt;= right)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[cur] &lt;= a[keyi] &amp;&amp; ++prev != cur)<span class="comment">//注意是前置++    ++prev != cur 防止自己与自己交换</span></span><br><span class="line">		&#123;</span><br><span class="line">			prev++;</span><br><span class="line">			<span class="built_in">Swap</span>(&amp;a[prev], &amp;a[cur]);</span><br><span class="line">		&#125;</span><br><span class="line">		cur++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Swap</span>(&amp;a[keyi], &amp;a[prev]);</span><br><span class="line">	keyi = prev;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> keyi;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="左右指针法"><a href="#左右指针法" class="headerlink" title="左右指针法"></a>左右指针法</h1><p>同挖洞法，左边找大，右边找小，然后交换</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//挖坑法类似，，左右指针法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">PartSort2</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//将中间值置换到begin位置，解决有序最坏的情况</span></span><br><span class="line">	<span class="type">int</span> mid = <span class="built_in">GetMidIndex</span>(a, left, right);</span><br><span class="line">	<span class="built_in">swap</span>(a[left], a[mid]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> begin = left, end = right;</span><br><span class="line">	<span class="type">int</span> keyi = begin;</span><br><span class="line">	<span class="keyword">while</span> (begin &lt; end)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (begin &lt; end &amp;&amp; a[end] &gt;= a[keyi])</span><br><span class="line">		&#123;</span><br><span class="line">			end--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (begin &lt; end &amp;&amp; a[begin] &lt;= a[keyi])</span><br><span class="line">		&#123;</span><br><span class="line">			begin++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">swap</span>(a[begin], a[end]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">swap</span>(a[keyi], a[begin]);</span><br><span class="line">	keyi = begin;</span><br><span class="line">	<span class="keyword">return</span> keyi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三数取中"><a href="#三数取中" class="headerlink" title="三数取中"></a>三数取中</h1><p><a href="https://cloudimge.com/image/nzrvW"><img src="https://c.1ovv.com/2023/03/25/nzrvW.md.png" alt="nzrvW.md.png" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></a></p>
<p>若不采用三数取中，时间复杂度为n^2；</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetMidIndex</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> left, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (a[left] &gt; a[mid])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[mid] &gt; a[right])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> mid;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a[left] &gt; a[right])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> right;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> left;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span><span class="comment">//a[left] &lt; a[mid]</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[mid] &lt; a[right])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> mid;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a[left] &lt; a[right])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> right;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> left;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="上述方法的主函数"><a href="#上述方法的主函数" class="headerlink" title="上述方法的主函数"></a>上述方法的主函数</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSort</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> left,<span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (left &gt;= right)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> KeyIndex = <span class="built_in">PartSort3</span>(a, left, right);</span><br><span class="line">	<span class="comment">//[left,right]</span></span><br><span class="line">	<span class="comment">//[left,KeyIndex-1]KeyIndex[KeyIndex+1,right]</span></span><br><span class="line">	<span class="comment">////左右子区间有序了，那么整个数组有序， 怎么有序 分而自治</span></span><br><span class="line">	<span class="comment">//QuickSort(a, left, KeyIndex - 1);</span></span><br><span class="line">	<span class="comment">//QuickSort(a, KeyIndex + 1, right);</span></span><br><span class="line">	<span class="comment">//又因为一直左右区间分，最后每个区间排 浪费数据量太小，没必要再调用快空间，增加消耗   故采用小区间优化(效果不明显，几毫秒的作用）</span></span><br><span class="line">		<span class="built_in">QuickSort</span>(a, left, KeyIndex - <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">QuickSort</span>(a, KeyIndex + <span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="快排非递归"><a href="#快排非递归" class="headerlink" title="快排非递归"></a>快排非递归</h1><p>通过模拟栈来划分左右区间，一定是右边界先入栈，然后左边界，对每个区间都是如此，这样取得时候就是先取左边界</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">/快排非递归</span><br><span class="line"><span class="comment">//快速排序非递归</span></span><br><span class="line"><span class="comment">//递归的缺陷？： ，递归深度太深，栈空间不够，容易造成栈溢出</span></span><br><span class="line"><span class="comment">//递归改非递归：1、(一般简单递归）直接改循环2、借助数据结构栈模拟递归过程（复杂递归)/////需要栈///队列也可以模拟</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QuickSortNonR</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">	<span class="comment">//栈先进后出，故先进右区间点，再进左区间点</span></span><br><span class="line">    st.<span class="built_in">push</span>(n<span class="number">-1</span>);</span><br><span class="line">	st.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">while</span> (!st.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> left = st.<span class="built_in">top</span>();</span><br><span class="line">		st.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> right = st.<span class="built_in">top</span>();</span><br><span class="line">		st.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> KeyIndex = <span class="built_in">PartSort1</span>(a, left, right);</span><br><span class="line">		<span class="comment">//[left,KeyIndex] KeyIndex[KeyIndex+1,right]</span></span><br><span class="line">		<span class="comment">//先判断左区间，再判断右区间，所以先入右区间，再入左区间</span></span><br><span class="line">		<span class="keyword">if</span> (KeyIndex + <span class="number">1</span> &lt; right)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//先入右区间点，再入左区间点</span></span><br><span class="line">			st.<span class="built_in">push</span>(right);</span><br><span class="line">			st.<span class="built_in">push</span>(KeyIndex+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (left &lt; KeyIndex - <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			st.<span class="built_in">push</span>(KeyIndex - <span class="number">1</span>);</span><br><span class="line">			st.<span class="built_in">push</span>(left);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="优化方案-采取左右指针"><a href="#优化方案-采取左右指针" class="headerlink" title="优化方案-采取左右指针"></a>优化方案-采取左右指针</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j), <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Arithmetic</category>
      </categories>
      <tags>
        <tag>Arithmetic</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>STL-list</title>
    <url>/2023/03/24/STL-list/</url>
    <content><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>双向循环链表</p>
<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>双向迭代器</p>
<h1 id="常用pai"><a href="#常用pai" class="headerlink" title="常用pai"></a>常用pai</h1><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><p>list <code>&lt;T&gt;</code> lstT;&#x2F;&#x2F;list采用采用模板类实现,对象的默认构造形式：</p>
<p>list(beg,end);&#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。</p>
<p>list(n,elem);&#x2F;&#x2F;构造函数将n个elem拷贝给本身。</p>
<p>list(const list &amp;lst);&#x2F;&#x2F;拷贝构造函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">l</span><span class="params">(v.begin()+<span class="number">1</span>,v.end()<span class="number">-1</span>)</span></span>;</span><br><span class="line">    <span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">l1</span><span class="params">(l.begin(),--l.end())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(l);</span><br><span class="line">    <span class="built_in">print</span>(l1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据元素的插入和删除"><a href="#数据元素的插入和删除" class="headerlink" title="数据元素的插入和删除"></a>数据元素的插入和删除</h2><p>push_back(elem);&#x2F;&#x2F;在容器尾部加入一个元素</p>
<p>pop_back();&#x2F;&#x2F;删除容器中最后一个元素</p>
<p>push_front(elem);&#x2F;&#x2F;在容器开头插入一个元素</p>
<p>pop_front();&#x2F;&#x2F;从容器开头移除第一个元素</p>
<p>insert(pos,elem);&#x2F;&#x2F;在pos位置插elem元素的拷贝，返回新数据的位置。</p>
<p>insert(pos,n,elem);&#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。</p>
<p>insert(pos,beg,end);&#x2F;&#x2F;在pos位置插入[beg,end)区间的数据，无返回值。</p>
<p>clear();&#x2F;&#x2F;移除容器的所有数据</p>
<p>erase(beg,end);&#x2F;&#x2F;删除[beg,end)区间的数据，返回下一个数据的位置。</p>
<p>erase(pos);&#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置。</p>
<p>remove(elem);&#x2F;&#x2F;删除容器中所有与elem值匹配的元素。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">myfunc</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val&gt;<span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    list&lt;<span class="type">int</span>&gt; mylist;</span><br><span class="line">	mylist.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">	mylist.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">	mylist.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">	mylist.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">	mylist.<span class="built_in">push_back</span>(<span class="number">50</span>);</span><br><span class="line">	mylist.<span class="built_in">push_front</span>(<span class="number">100</span>);</span><br><span class="line">	mylist.<span class="built_in">push_front</span>(<span class="number">200</span>);</span><br><span class="line">	mylist.<span class="built_in">push_front</span>(<span class="number">300</span>);</span><br><span class="line">	mylist.<span class="built_in">push_front</span>(<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">1000</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">2000</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">    mylist.<span class="built_in">insert</span>(mylist.<span class="built_in">begin</span>(), v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">print</span>(mylist);</span><br><span class="line"></span><br><span class="line">    mylist.<span class="built_in">remove</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">print</span>(mylist);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除特定条件的数,括号内为bool类型判断</span></span><br><span class="line">    mylist.<span class="built_in">remove_if</span>(myfunc);</span><br><span class="line">    <span class="built_in">print</span>(mylist);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="大小操作"><a href="#大小操作" class="headerlink" title="大小操作"></a>大小操作</h2><p>size();&#x2F;&#x2F;返回容器中元素的个数</p>
<p>empty();&#x2F;&#x2F;判断容器是否为空</p>
<p>resize(num);&#x2F;&#x2F;重新指定容器的长度为num，</p>
<p>若容器变长，则以默认值填充新位置。</p>
<p>如果容器变短，则末尾超出容器长度的元素被删除。</p>
<p>resize(num, elem);&#x2F;&#x2F;重新指定容器的长度为num，</p>
<p>若容器变长，则以elem值填充新位置。</p>
<p>如果容器变短，则末尾超出容器长度的元素被删除。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    list&lt;<span class="type">int</span>&gt; mylist;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		mylist.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;size:&quot;</span> &lt;&lt; mylist.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mylist.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;kong&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;!kong&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mylist.<span class="built_in">resize</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(mylist);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="赋值操作和数据的存取"><a href="#赋值操作和数据的存取" class="headerlink" title="赋值操作和数据的存取"></a>赋值操作和数据的存取</h2><p>assign(beg, end);&#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。</p>
<p>assign(n, elem);&#x2F;&#x2F;将n个elem拷贝赋值给本身。</p>
<p>list&amp;operator&#x3D;(const list &amp;lst);&#x2F;&#x2F;重载等号操作符</p>
<p>swap(lst);&#x2F;&#x2F;将lst与本身的元素互换。</p>
<p>front();&#x2F;&#x2F;返回第一个元素。</p>
<p>back();&#x2F;&#x2F;返回最后一个元素。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	list&lt;<span class="type">int</span>&gt; mylist;</span><br><span class="line">	mylist.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">	<span class="built_in">print</span>(mylist);</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; mylist.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; mylist.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	list&lt;<span class="type">int</span>&gt; mylist2;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		mylist2.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	mylist2.<span class="built_in">swap</span>(mylist);</span><br><span class="line">	<span class="built_in">print</span>(mylist2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反转和排序"><a href="#反转和排序" class="headerlink" title="反转和排序"></a>反转和排序</h2><p>reverse();&#x2F;&#x2F;反转链表，比如lst包含1,3,5元素，运行此方法后，lst就包含5,3,1元素。</p>
<p>sort(); &#x2F;&#x2F;list排序</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">、<span class="function"><span class="type">bool</span> <span class="title">myfunc1</span><span class="params">(<span class="type">int</span> val1,<span class="type">int</span> val2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val1&gt;val2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    list&lt;<span class="type">int</span>&gt; mylist;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		mylist.<span class="built_in">push_back</span>(i + <span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(mylist);</span><br><span class="line"></span><br><span class="line">    mylist.<span class="built_in">reverse</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(mylist);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意：list容器不能使用sort算法</span></span><br><span class="line">	<span class="comment">//sort(mylist.begin(), mylist.end());</span></span><br><span class="line"></span><br><span class="line">    mylist.<span class="built_in">sort</span>();</span><br><span class="line">    <span class="built_in">print</span>(mylist);</span><br><span class="line"></span><br><span class="line">    mylist.<span class="built_in">sort</span>(myfunc1);</span><br><span class="line">    <span class="built_in">print</span>(mylist);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> list&lt;T&gt; &amp;l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">typename</span> list&lt;T&gt;::const_iterator it=l.<span class="built_in">begin</span>();it!=l.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>STL</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>STL-deque</title>
    <url>/2023/03/24/STL-deque/</url>
    <content><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>逻辑上是连续的存储空间，实际上是由很多块定量的块空间，通过中控器连接起来</p>
<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>随机访问迭代器</p>
<h1 id="常用的API"><a href="#常用的API" class="headerlink" title="常用的API"></a>常用的API</h1><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><p>deque <code>&lt;T&gt;</code> deqT;&#x2F;&#x2F;默认构造形式</p>
<p>deque(beg, end);&#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。</p>
<p>deque(n, elem);&#x2F;&#x2F;构造函数将n个elem拷贝给本身。</p>
<p>deque(const deque &amp;deq);&#x2F;&#x2F;拷贝构造函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="function">deque&lt;<span class="type">int</span>&gt; <span class="title">d</span><span class="params">(arr,arr+<span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(<span class="type">int</span>))</span></span>;</span><br><span class="line">    <span class="built_in">print</span>(d);</span><br><span class="line"></span><br><span class="line">    <span class="function">deque&lt;<span class="type">int</span>&gt; <span class="title">d1</span><span class="params">(<span class="number">10</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="built_in">print</span>(d1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p>assign(beg, end);&#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。</p>
<p>assign(n, elem);&#x2F;&#x2F;将n个elem拷贝赋值给本身。</p>
<p>deque&amp;operator&#x3D;(const deque &amp;deq); &#x2F;&#x2F;重载等号操作符</p>
<p>swap(deq);&#x2F;&#x2F; 将deq与本身的元素互换</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; d;</span><br><span class="line">    d.<span class="built_in">assign</span>(<span class="number">10</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">print</span>(d);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arr[]=&#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; d1;</span><br><span class="line">    d1.<span class="built_in">assign</span>(arr,arr+<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">print</span>(d1);</span><br><span class="line"></span><br><span class="line">    d.<span class="built_in">swap</span>(d1);</span><br><span class="line">    <span class="built_in">print</span>(d);</span><br><span class="line">    <span class="built_in">print</span>(d1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h2><p>deque.size();&#x2F;&#x2F;返回容器中元素的个数</p>
<p>deque.empty();&#x2F;&#x2F;判断容器是否为空</p>
<p>deque.resize(num);&#x2F;&#x2F;重新指定容器的长度为num,若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</p>
<p>deque.resize(num, elem); &#x2F;&#x2F;重新指定容器的长度为num,若容器变长，则以elem值填充新位置,如果容器变短，则末尾超出容器长度的元素被删除。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; d;</span><br><span class="line">	cout &lt;&lt; d.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (d.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	d.<span class="built_in">resize</span>(<span class="number">10</span>, <span class="number">7</span>);</span><br><span class="line">	<span class="built_in">print</span>(d);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="双端插入和删除"><a href="#双端插入和删除" class="headerlink" title="双端插入和删除"></a>双端插入和删除</h2><p>push_back(elem);&#x2F;&#x2F;在容器尾部添加一个数据</p>
<p>push_front(elem);&#x2F;&#x2F;在容器头部插入一个数据</p>
<p>pop_back();&#x2F;&#x2F;删除容器最后一个数据</p>
<p>pop_front();&#x2F;&#x2F;删除容器第一个数据</p>
<p>at(idx);&#x2F;&#x2F;返回索引idx所指的数据，如果idx越界，抛出out_of_range。</p>
<p>operator[];&#x2F;&#x2F;返回索引idx所指的数据，如果idx越界，不抛出异常，直接出错。</p>
<p>front();&#x2F;&#x2F;返回第一个数据。</p>
<p>back();&#x2F;&#x2F;返回最后一个数据</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; d;</span><br><span class="line">    d.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    d.<span class="built_in">push_front</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">print</span>(d);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;大小:&quot;</span>&lt;&lt;d.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    d[<span class="number">0</span>]=<span class="number">200</span>;</span><br><span class="line">    <span class="built_in">print</span>(d);</span><br><span class="line">    <span class="comment">//d.at(4)=90;会报异常</span></span><br><span class="line">    d.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">    d.<span class="built_in">pop_back</span>();</span><br><span class="line">    d.<span class="built_in">pop_front</span>();</span><br><span class="line">    <span class="built_in">print</span>(d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h2><p>插入操作</p>
<p>insert(pos,elem);&#x2F;&#x2F;在pos位置插入一个elem元素的拷贝，返回新数据的位置。</p>
<p>insert(pos,n,elem);&#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。</p>
<p>insert(pos,beg,end);&#x2F;&#x2F;在pos位置插入[beg,end)区间的数据，无返回值</p>
<p>删除操作</p>
<p>clear();&#x2F;&#x2F;移除容器的所有数据</p>
<p>erase(beg,end);&#x2F;&#x2F;删除[beg,end)区间的数据，返回下一个数据的位置。</p>
<p>erase(pos);&#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt;<span class="built_in">d</span>(arr,arr+<span class="built_in">sizeof</span>(arr)/<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line">    d.<span class="built_in">insert</span>(d.<span class="built_in">begin</span>()+<span class="number">4</span>,<span class="number">0</span>);</span><br><span class="line">    d.<span class="built_in">insert</span>(d.<span class="built_in">end</span>()<span class="number">-3</span>,<span class="number">2</span>,<span class="number">12</span>);</span><br><span class="line">    <span class="built_in">print</span>(d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test06</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; d;</span><br><span class="line">	d.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">	d.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">	d.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">	d.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">	d.<span class="built_in">push_back</span>(<span class="number">50</span>);</span><br><span class="line">    <span class="built_in">print</span>(d);</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt;::iterator it=d.<span class="built_in">erase</span>(d.<span class="built_in">begin</span>()+<span class="number">2</span>,d.<span class="built_in">end</span>()<span class="number">-1</span>);</span><br><span class="line">    cout&lt;&lt;*it&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">print</span>(d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> deque&lt;T&gt; &amp;deq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">typename</span> deque&lt;T&gt;::const_iterator it=deq.<span class="built_in">begin</span>();it!=deq.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>STL</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>STL-queue</title>
    <url>/2023/03/24/STL-queue/</url>
    <content><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>连续的存储空间，有两个口，一个是进入数据，一个是出数据，有先进先出的特性</p>
<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>没有迭代器</p>
<h1 id="常用api"><a href="#常用api" class="headerlink" title="常用api"></a>常用api</h1><p>1.构造函数 2.赋值3.数据存取 3.大小操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		q.<span class="built_in">push</span>(i + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;front:&quot;</span> &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;back:&quot;</span> &lt;&lt; q.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; q.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Maker</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Maker</span>(string name, <span class="type">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	string name;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	queue&lt;Maker *&gt; q;</span><br><span class="line">	q.<span class="built_in">push</span>(<span class="keyword">new</span> <span class="built_in">Maker</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">18</span>));</span><br><span class="line">	q.<span class="built_in">push</span>(<span class="keyword">new</span> <span class="built_in">Maker</span>(<span class="string">&quot;bbb&quot;</span>, <span class="number">19</span>));</span><br><span class="line">	q.<span class="built_in">push</span>(<span class="keyword">new</span> <span class="built_in">Maker</span>(<span class="string">&quot;ccc&quot;</span>, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		Maker *m = q.<span class="built_in">front</span>();</span><br><span class="line">		cout &lt;&lt; m-&gt;name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; m-&gt;age &lt;&lt; endl;</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">delete</span> m;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>STL</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>Pair对组</title>
    <url>/2023/03/28/STL-pair/</url>
    <content><![CDATA[<h1 id="Pair对组"><a href="#Pair对组" class="headerlink" title="Pair对组"></a>Pair对组</h1><p>1.pair对组是一个类，类中有两个共有成员变量，&lt;first,second&gt;</p>
<p>2.对组通常用来接收key-value这样的元素</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="function">pair&lt;<span class="type">int</span>,string&gt; <span class="title">p</span><span class="params">(<span class="number">1</span>,<span class="string">&quot;qw&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;p.first&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;p.second&lt;&lt;endl;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>STL</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>STL-stack</title>
    <url>/2023/03/24/STL-stack/</url>
    <content><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>连续的存储空间，只有一个出口，先进后出特性</p>
<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>没有迭代器</p>
<h1 id="常用api"><a href="#常用api" class="headerlink" title="常用api"></a>常用api</h1><p>1.构造函数 2.赋值3.数据存取 3.大小操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//栈容器，先进后出</span></span><br><span class="line"><span class="comment">//存储基础数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">	s.<span class="built_in">push</span>(<span class="number">10</span>);</span><br><span class="line">	s.<span class="built_in">push</span>(<span class="number">20</span>);</span><br><span class="line">	s.<span class="built_in">push</span>(<span class="number">30</span>);</span><br><span class="line">	s.<span class="built_in">push</span>(<span class="number">40</span>);</span><br><span class="line">	s.<span class="built_in">push</span>(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//输出栈中元素</span></span><br><span class="line">	<span class="keyword">while</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//输出栈顶元素</span></span><br><span class="line">		cout &lt;&lt; s.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		<span class="comment">//弹出栈顶元素</span></span><br><span class="line">		s.<span class="built_in">pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;size:&quot;</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Maker</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Maker</span>(string name, <span class="type">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	string name;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//存储对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stack&lt;Maker&gt; s;</span><br><span class="line">	s.<span class="built_in">push</span>(<span class="built_in">Maker</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">18</span>));</span><br><span class="line">	s.<span class="built_in">push</span>(<span class="built_in">Maker</span>(<span class="string">&quot;bbb&quot;</span>, <span class="number">19</span>));</span><br><span class="line">	s.<span class="built_in">push</span>(<span class="built_in">Maker</span>(<span class="string">&quot;ccc&quot;</span>, <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Name:&quot;</span> &lt;&lt; s.<span class="built_in">top</span>().name &lt;&lt; <span class="string">&quot; Age:&quot;</span> &lt;&lt; s.<span class="built_in">top</span>().age &lt;&lt; endl;</span><br><span class="line">		s.<span class="built_in">pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>STL</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>Set/MultiSet</title>
    <url>/2023/03/28/STL-set_multiset/</url>
    <content><![CDATA[<h1 id="Set-x2F-MultiSet"><a href="#Set-x2F-MultiSet" class="headerlink" title="Set&#x2F;MultiSet"></a>Set&#x2F;MultiSet</h1><p>set容器是关联式容器，容器自身有规则，通过键值排序，set容器中的元素是键值也是实值</p>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>平衡二叉树</p>
<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>双向迭代器</p>
<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>set容器和multiset容器的区别是multiset允许有相同的元素</p>
<h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><h1 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h1><p>构造函数</p>
<p>set<code>&lt;T&gt;</code> st;&#x2F;&#x2F;set默认构造函数：</p>
<p>mulitset<code>&lt;T&gt;</code> mst; &#x2F;&#x2F;multiset默认构造函数:</p>
<p>set(const set &amp;st);&#x2F;&#x2F;拷贝构造函数</p>
<h1 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h1><p>set&amp;operator&#x3D;(const set &amp;st);&#x2F;&#x2F;重载等号操作符</p>
<p>swap(st);&#x2F;&#x2F;交换两个集合容器</p>
<h1 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h1><p>size();&#x2F;&#x2F;返回容器中元素的数目</p>
<p>empty();&#x2F;&#x2F;判断容器是否为空</p>
<h1 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h1><p>insert(elem);&#x2F;&#x2F;在容器中插入元素。</p>
<p>clear();&#x2F;&#x2F;清除所有元素</p>
<p>erase(pos);&#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器。</p>
<p>erase(beg, end);&#x2F;&#x2F;删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</p>
<p>erase(elem);&#x2F;&#x2F;删除容器中值为elem的元素。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">3</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">	s.<span class="built_in">insert</span>(<span class="number">7</span>);</span><br><span class="line">    <span class="comment">//自身规则默认从小到大</span></span><br><span class="line">    <span class="built_in">print</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><pre><code>find(key);//查找键key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();
</code></pre>
<ol>
<li><p>count(key);&#x2F;&#x2F;查找键key的元素个数</p>
</li>
<li><p>lower_bound(keyElem);&#x2F;&#x2F;返回第一个key&gt;&#x3D;keyElem元素的迭代器。</p>
</li>
<li><p>upper_bound(keyElem);&#x2F;&#x2F;返回第一个key&gt;keyElem元素的迭代器。</p>
<p> equal_range(keyElem);&#x2F;&#x2F;返回容器中key与keyElem相等的上下限的两个迭代器。</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    set&lt;<span class="type">int</span>,myfunc&gt; s;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">3</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">	s.<span class="built_in">insert</span>(<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">print</span>(s);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;--------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">    set&lt;<span class="type">int</span>,myfunc&gt;::iterator it=s.<span class="built_in">find</span>(<span class="number">90</span>);</span><br><span class="line">    <span class="keyword">if</span>(it==s.<span class="built_in">end</span>())</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;查找失败&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;查找成功&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找大于等于2的最小的数,注意这里的大于等于对于的是默认的升序，</span></span><br><span class="line">    <span class="comment">//那么我们定义的是降序，所以这里的lower_bound()是查找第一个小于等于2的数</span></span><br><span class="line">    it=s.<span class="built_in">lower_bound</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(it==s.<span class="built_in">end</span>())</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;查找失败&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;查找成功:&quot;</span>&lt;&lt;*it&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回第一个key&gt;keyElem元素的迭代器。，同理这里是&lt;</span></span><br><span class="line">    it=s.<span class="built_in">upper_bound</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span>(it==s.<span class="built_in">end</span>())</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;查找失败&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;查找成功:&quot;</span>&lt;&lt;*it&lt;&lt;endl;</span><br><span class="line">  </span><br><span class="line">    	<span class="comment">//返回大于等于2的两个最小的数，如果有2那么就返回2和大于2的最小数</span></span><br><span class="line">    pair&lt;set&lt;<span class="type">int</span> ,myfunc&gt;::iterator,set&lt;<span class="type">int</span>,myfunc&gt;::iterator&gt; p=s.<span class="built_in">equal_range</span>(<span class="number">9</span>);</span><br><span class="line">    cout&lt;&lt;*p.first&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;*p.second&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    multiset&lt;<span class="type">int</span>&gt; ms;</span><br><span class="line">    ms.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">    ms.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">    ms.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">    ms.<span class="built_in">insert</span>(<span class="number">2</span>);</span><br><span class="line">    ms.<span class="built_in">insert</span>(<span class="number">7</span>);</span><br><span class="line">    ms.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;ms.<span class="built_in">count</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="改变规则（排序规则）"><a href="#改变规则（排序规则）" class="headerlink" title="改变规则（排序规则）"></a>改变规则（排序规则）</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">myfunc</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val1,<span class="type">int</span> val2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val1&gt;val2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print1</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;v&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不能通过算法排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    set&lt;<span class="type">int</span>,myfunc&gt; s;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">3</span>);</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">	s.<span class="built_in">insert</span>(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//自身规则进行排序，从小到大</span></span><br><span class="line">	<span class="comment">//不能通过算法排序来排序关联式容器的元素</span></span><br><span class="line">	<span class="comment">//sort(s.begin(), s.end());</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">print</span>(s);</span><br><span class="line">    <span class="comment">//两种打印方式</span></span><br><span class="line">    for_each(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>(),print1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="储存对象"><a href="#储存对象" class="headerlink" title="储存对象"></a>储存对象</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存储对象时，需要告诉set容器规则</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Maker</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Maker</span>(string name,<span class="type">int</span> age)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	string name;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">myfunc1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Maker m1,Maker m2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m1.age&lt;m2.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    set&lt;Maker,myfunc1&gt; s;</span><br><span class="line"></span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="built_in">Maker</span>(<span class="string">&quot;hhh&quot;</span>,<span class="number">1</span>));</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="built_in">Maker</span>(<span class="string">&quot;hhh&quot;</span>,<span class="number">2</span>));</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="built_in">Maker</span>(<span class="string">&quot;hhh&quot;</span>,<span class="number">6</span>));</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="built_in">Maker</span>(<span class="string">&quot;hhh&quot;</span>,<span class="number">4</span>));</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="built_in">Maker</span>(<span class="string">&quot;hhh&quot;</span>,<span class="number">8</span>));</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="built_in">Maker</span>(<span class="string">&quot;hhh&quot;</span>,<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">    for_each(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>(),[](Maker m)&#123;cout&lt;&lt;m.age&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;m.name&lt;&lt;endl;&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>1.set容器插入相同元素时，不会报错，但是不插入数据</p>
<p>2.set容器存储对象时，需要告诉set容器的规则</p>
]]></content>
      <categories>
        <category>STL</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>STL-vector</title>
    <url>/2023/03/24/STL-vector/</url>
    <content><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>连续的储存空间，但在结构上是单口，无法对头部进行操作</p>
<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>随机访问迭代器</p>
<h1 id="vector容器动态增长原理"><a href="#vector容器动态增长原理" class="headerlink" title="vector容器动态增长原理"></a>vector容器动态增长原理</h1><p>1.当存储空不够时，会开辟另一块大的空间，然后把数据拷贝过去，最后在销毁原来的空间</p>
<p>2.申请的空间,会比用户需求大一点</p>
<p>3.重新分配空间，那么原来的迭代器就会失效</p>
<h1 id="常用的api"><a href="#常用的api" class="headerlink" title="常用的api"></a>常用的api</h1><h2 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1.构造函数"></a>1.构造函数</h2><p>vector <code>&lt;T&gt;</code> v; &#x2F;&#x2F;采用模板实现类实现，默认构造函数</p>
<p>vector(v.begin(), v.end());&#x2F;&#x2F;将v[begin(), end())区间中的元素拷贝给本身。</p>
<p>vector(n, elem);&#x2F;&#x2F;构造函数将n个elem拷贝给本身。</p>
<p>vector(const vector &amp;vec);&#x2F;&#x2F;拷贝构造函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(arr,arr+<span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(<span class="type">int</span>))</span></span>;</span><br><span class="line">    <span class="built_in">print</span>(v);</span><br><span class="line">    <span class="built_in">Rprint</span>(v);</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v2</span><span class="params">(<span class="number">10</span>,<span class="number">6</span>)</span></span>;</span><br><span class="line">    <span class="built_in">print</span>(v2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-赋值操作"><a href="#2-赋值操作" class="headerlink" title="2.赋值操作"></a>2.赋值操作</h2><p>assign(beg, end);&#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。</p>
<p>assign(n, elem);&#x2F;&#x2F;将n个elem拷贝赋值给本身。</p>
<p>vector&amp;operator&#x3D;(const vector  &amp;vec);&#x2F;&#x2F;重载等号操作符</p>
<p>swap(vec);&#x2F;&#x2F; 将vec与本身的元素互换。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    v.<span class="built_in">assign</span>(<span class="number">10</span>,<span class="number">6</span>);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line">    v2.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">	v2.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">	v2.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(v);</span><br><span class="line">	<span class="built_in">print</span>(v2);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;===================&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    v.<span class="built_in">swap</span>(v2);<span class="comment">//最快的方式将指针交换</span></span><br><span class="line">    <span class="built_in">print</span>(v);</span><br><span class="line">	<span class="built_in">print</span>(v2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-大小操作"><a href="#3-大小操作" class="headerlink" title="3.大小操作"></a>3.大小操作</h2><p>size();&#x2F;&#x2F;返回容器中元素的个数</p>
<p>empty();&#x2F;&#x2F;判断容器是否为空</p>
<p>resize(int num);&#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</p>
<p>resize(int num, elem);&#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以elem值填充新位置。如果容器变短，则末尾超出容器长&gt;度的元素被删除。</p>
<p>capacity();&#x2F;&#x2F;容器的容量</p>
<p>reserve(int len);&#x2F;&#x2F;容器预留len个元素长度，预留位置不初始化，元素不可访问。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1.resize开辟空间，并初始化</span></span><br><span class="line">	<span class="comment">//2.reserve开辟空间，但不初始化</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line">	v2.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">	v2.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">	v2.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;size:&quot;</span>&lt;&lt;v2.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">	v2.<span class="built_in">resize</span>(<span class="number">5</span>);</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;size:&quot;</span>&lt;&lt;v2.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">	<span class="built_in">print</span>(v2);</span><br><span class="line"></span><br><span class="line">    v2.<span class="built_in">reserve</span>(<span class="number">20</span>);</span><br><span class="line">    v2.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="built_in">print</span>(v2);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;size:&quot;</span>&lt;&lt;v2.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;capacity:&quot;</span>&lt;&lt;v2.<span class="built_in">capacity</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; v2[10] &lt;&lt; endl;//err,不能访问未初始化的空间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-reserve的作用"><a href="#4-reserve的作用" class="headerlink" title="4.reserve的作用"></a>4.reserve的作用</h2><p>预开辟空间</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果不写reserve，那么将多次开辟空间</span></span><br><span class="line">    <span class="comment">//v.reserve(100);</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>*p=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100866666</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">if</span>(p!=&amp;v[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            p=&amp;v[<span class="number">0</span>];</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-swap的作用"><a href="#5-swap的作用" class="headerlink" title="5.swap的作用"></a>5.swap的作用</h2><p>使用匿名对象缩小capacity</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;capacity:&quot;</span>&lt;&lt;v.<span class="built_in">capacity</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;size:&quot;</span>&lt;&lt;v.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    v.<span class="built_in">resize</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;capacity:&quot;</span>&lt;&lt;v.<span class="built_in">capacity</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;size:&quot;</span>&lt;&lt;v.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">print</span>(v);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//step1.  v2用来测试</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v2</span><span class="params">(v)</span></span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;capacity:&quot;</span>&lt;&lt;v2.<span class="built_in">capacity</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;size:&quot;</span>&lt;&lt;v2.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//vecor拷贝构造，只会赋值，不会将空间复制</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//step2. 将step1省略，使用匿名对象</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(v).<span class="built_in">swap</span>(v);<span class="comment">//vector&lt;int&gt;(匿名对象)(v).swap(v),匿名先对象调用拷贝构造，将capacity变成10，再与v交换，使得v的capacity变小</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;capacity:&quot;</span>&lt;&lt;v.<span class="built_in">capacity</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;size:&quot;</span>&lt;&lt;v.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-存取操作"><a href="#6-存取操作" class="headerlink" title="6.存取操作"></a>6.存取操作</h2><p>at(int idx); &#x2F;&#x2F;返回索引idx所指的数据，如果idx越界，抛出out_of_range异常。</p>
<p>operator[];&#x2F;&#x2F;返回索引idx所指的数据，越界时，运行直接报错</p>
<p>front();&#x2F;&#x2F;返回容器中第一个数据元素</p>
<p>back();&#x2F;&#x2F;返回容器中最后一个数据元素</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test06</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; v.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; v.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	v.<span class="built_in">front</span>() = <span class="number">100</span>;</span><br><span class="line">	v.<span class="built_in">back</span>() = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; v[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-插入和删除"><a href="#7-插入和删除" class="headerlink" title="7.插入和删除"></a>7.插入和删除</h2><p>insert(const_iterator pos, int count,ele);&#x2F;&#x2F;迭代器指向位置pos插入count个元素ele.</p>
<p>push_back(ele); &#x2F;&#x2F;尾部插入元素ele</p>
<p>pop_back();&#x2F;&#x2F;删除最后一个元素</p>
<p>erase(const_iterator start, const_iterator end);&#x2F;&#x2F;删除迭代器从start到end之间的元素</p>
<p>erase(const_iterator pos);&#x2F;&#x2F;删除迭代器指向的元素</p>
<p>clear();&#x2F;&#x2F;删除容器中所有元素</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test07</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(v);</span><br><span class="line"></span><br><span class="line">	v.<span class="built_in">insert</span>(v.<span class="built_in">begin</span>() + <span class="number">1</span>,<span class="number">2</span>, <span class="number">100</span>);</span><br><span class="line">	<span class="built_in">print</span>(v);</span><br><span class="line"></span><br><span class="line">	v.<span class="built_in">pop_back</span>();</span><br><span class="line">	<span class="built_in">print</span>(v);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;-------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	v.<span class="built_in">erase</span>(v.<span class="built_in">begin</span>());</span><br><span class="line">	<span class="built_in">print</span>(v);</span><br><span class="line"></span><br><span class="line">	v.<span class="built_in">erase</span>(v.<span class="built_in">begin</span>() + <span class="number">1</span>, v.<span class="built_in">end</span>() - <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">print</span>(v);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	v.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="built_in">print</span>(v);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="api的注意"><a href="#api的注意" class="headerlink" title="api的注意"></a>api的注意</h1><p>1.resize开辟空间，并初始化。reserve开辟空间，但不初始化.没有初始化的空间不能访问</p>
<p>2.reserve作用：如果容器要存储大量数据时，要先开辟空间，避免多次申请空间</p>
<p>3.swap作用:缩小容器的容量</p>
<h1 id="打印vector"><a href="#打印vector" class="headerlink" title="打印vector"></a>打印vector</h1><p> 该段代码在编译时是会报错的，原因在于iterator为依赖限定名称。在T的实际类型未确定之前，</p>
<p> 编译无法知道iterator是指代类型还是某个静态成员。消除歧义的方法很简单，显式注明iterator为类型名称，</p>
<p> 如下所示：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(vector&lt;T&gt; &amp;vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">typename</span> vector&lt;T&gt;::const_iterator it=vec.<span class="built_in">begin</span>();it!=vec.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Rprint</span><span class="params">(vector&lt;T&gt; &amp;vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">typename</span> vector&lt;T&gt;::reverse_iterator it=vec.<span class="built_in">rbegin</span>();it!=vec.<span class="built_in">rend</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>STL</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>Map/MultiMap</title>
    <url>/2023/03/28/STL-map_multimap/</url>
    <content><![CDATA[<h1 id="Map-x2F-MultiMap"><a href="#Map-x2F-MultiMap" class="headerlink" title="Map&#x2F;MultiMap"></a>Map&#x2F;MultiMap</h1><p>map&#x2F;multimap也是关联式容器，容器自身有规则，通过键值排序，map容器中的元素是对组，对组的第一个元素是键值，不能改变，第二个元素是实值，可以改变</p>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>平衡二叉树</p>
<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>双向迭代器</p>
<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>map容器和multimap容器的区别是multimap允许有相同的元素</p>
<h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><h1 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h1><p>set<code>&lt;T&gt;</code> st;&#x2F;&#x2F;set默认构造函数：</p>
<p>mulitset<code>&lt;T&gt;</code> mst; &#x2F;&#x2F;multiset默认构造函数:</p>
<p>set(const set &amp;st);&#x2F;&#x2F;拷贝构造函数</p>
<h1 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h1><p>set&amp;operator&#x3D;(const set &amp;st);&#x2F;&#x2F;重载等号操作符</p>
<p>swap(st);&#x2F;&#x2F;交换两个集合容器</p>
<h1 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h1><p>size();&#x2F;&#x2F;返回容器中元素的数目</p>
<p>empty();&#x2F;&#x2F;判断容器是否为空</p>
<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p>find(key);&#x2F;&#x2F;查找键key是否存在,若存在，返回该键的元素的迭代器；&#x2F;若不存在，返回map.end();</p>
<p>count(keyElem);&#x2F;&#x2F;返回容器中key为keyElem的对组个数。对map来说，要么是0，要么是1。对multimap来说，值可能大于1。</p>
<p>lower_bound(keyElem);&#x2F;&#x2F;返回第一个key&gt;&#x3D;keyElem元素的迭代器。</p>
<p>upper_bound(keyElem);&#x2F;&#x2F;返回第一个key&gt;keyElem元素的迭代器。</p>
<p>equal_range(keyElem);&#x2F;&#x2F;返回容器中key与keyElem相等的上下限的两个迭代器。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    map&lt;<span class="type">int</span>, string&gt; mymap;</span><br><span class="line">	mymap[<span class="number">1</span>] = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">	mymap[<span class="number">2</span>] = <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">	mymap[<span class="number">3</span>] = <span class="string">&quot;ccc&quot;</span>;</span><br><span class="line">	mymap[<span class="number">4</span>] = <span class="string">&quot;ddd&quot;</span>;</span><br><span class="line">	mymap[<span class="number">5</span>] = <span class="string">&quot;eee&quot;</span>;</span><br><span class="line">    map&lt;<span class="type">int</span>, string&gt;::iterator it = mymap.<span class="built_in">find</span>(<span class="number">30</span>);</span><br><span class="line">    	<span class="keyword">if</span> (it == mymap.<span class="built_in">end</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;查找失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;key:&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; value:&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//查找大于等于3的最小的数</span></span><br><span class="line">	it = mymap.<span class="built_in">lower_bound</span>(<span class="number">3</span>);</span><br><span class="line">	<span class="keyword">if</span> (it == mymap.<span class="built_in">end</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;查找失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;key:&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; value:&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//查找大于3的最小的数</span></span><br><span class="line">	it = mymap.<span class="built_in">upper_bound</span>(<span class="number">3</span>);</span><br><span class="line">	<span class="keyword">if</span> (it == mymap.<span class="built_in">end</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;查找失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;key:&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; value:&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;--------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//返回大于等于2的两个最小的数，如果有2那么就返回2和大于2的最小数</span></span><br><span class="line">	pair&lt;map&lt;<span class="type">int</span>,string&gt;::iterator,map&lt;<span class="type">int</span>,string&gt;::iterator&gt; ret=mymap.<span class="built_in">equal_range</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (ret.first != mymap.<span class="built_in">end</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;key:&quot;</span> &lt;&lt; ret.first-&gt;first &lt;&lt; <span class="string">&quot; Value:&quot;</span> &lt;&lt; ret.first-&gt;second &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (ret.second != mymap.<span class="built_in">end</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;key:&quot;</span> &lt;&lt; ret.second-&gt;first &lt;&lt; <span class="string">&quot; Value:&quot;</span> &lt;&lt; ret.second-&gt;second &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><p>插入数据元素操作</p>
<p>map.insert(…); &#x2F;&#x2F;往容器插入元素，返回pair&lt;iterator,bool&gt;</p>
<p>map&lt;int, string&gt; mapStu;</p>
<p>&#x2F;&#x2F; 第一种 通过pair的方式插入对象</p>
<p>mapStu.insert(pair&lt;int, string&gt;(3, “小张”));</p>
<p>&#x2F;&#x2F; 第二种 通过pair的方式插入对象</p>
<p>mapStu.inset(make_pair(-1, “校长”));</p>
<p>&#x2F;&#x2F; 第三种 通过value_type的方式插入对象</p>
<p>mapStu.insert(map&lt;int, string&gt;::value_type(1, “小李”));</p>
<p>&#x2F;&#x2F; 第四种 通过数组的方式插入值</p>
<p>mapStu[3] &#x3D; “小刘”;</p>
<p>mapStu[5] &#x3D; “小王”;</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    map&lt;<span class="type">int</span>,string&gt; m;</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,string&gt;(<span class="number">1</span>,<span class="string">&quot;haha&quot;</span>));</span><br><span class="line"></span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">2</span>,<span class="string">&quot;opop&quot;</span>));</span><br><span class="line"></span><br><span class="line">    m.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>,string&gt;::<span class="built_in">value_type</span>(<span class="number">3</span>,<span class="string">&quot;uiui&quot;</span>));</span><br><span class="line"></span><br><span class="line">    m[<span class="number">5</span>]=<span class="string">&quot;shushu&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(m);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意：[]方式插入数据,如果没有实值，那么键值也是存在的</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    map&lt;<span class="type">int</span>, string&gt; mymap;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1.</span></span><br><span class="line">	mymap.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, string&gt;(<span class="number">3</span>, <span class="string">&quot;aaa&quot;</span>));</span><br><span class="line">	<span class="comment">//2.</span></span><br><span class="line">	mymap.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">6</span>, <span class="string">&quot;bbb&quot;</span>));</span><br><span class="line">	<span class="comment">//3.</span></span><br><span class="line">	mymap.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>, string&gt;::<span class="built_in">value_type</span>(<span class="number">2</span>, <span class="string">&quot;ccc&quot;</span>));</span><br><span class="line">	<span class="comment">//4.</span></span><br><span class="line">	mymap[<span class="number">4</span>] = <span class="string">&quot;ddd&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(mymap);</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;size:&quot;</span> &lt;&lt; mymap.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; mymap[<span class="number">100</span>] &lt;&lt; endl;<span class="comment">//插入键值，返回的是实值</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;size:&quot;</span> &lt;&lt; mymap.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><p>clear();&#x2F;&#x2F;清除所有元素</p>
<p>erase(pos);&#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器。</p>
<p>erase(beg, end);&#x2F;&#x2F;删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</p>
<p>erase(elem);&#x2F;&#x2F;删除容器中值为elem的元素。</p>
<h1 id="改变规则"><a href="#改变规则" class="headerlink" title="改变规则"></a>改变规则</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">myfunc</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> k1,<span class="type">int</span> k2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> k1&gt;k2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    map&lt;<span class="type">int</span>,string,myfunc&gt; m;</span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,string&gt;(<span class="number">1</span>,<span class="string">&quot;haha&quot;</span>));</span><br><span class="line"></span><br><span class="line">    m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">2</span>,<span class="string">&quot;opop&quot;</span>));</span><br><span class="line"></span><br><span class="line">    m.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>,string&gt;::<span class="built_in">value_type</span>(<span class="number">3</span>,<span class="string">&quot;uiui&quot;</span>));</span><br><span class="line"></span><br><span class="line">    m[<span class="number">5</span>]=<span class="string">&quot;shushu&quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(m);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>STL</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>STL-string</title>
    <url>/2023/03/24/STL-string/</url>
    <content><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>连续的存储空间，用一个char*指向这片空间</p>
<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>随机访问迭代器</p>
<h1 id="常用api及其用法"><a href="#常用api及其用法" class="headerlink" title="常用api及其用法"></a>常用api及其用法</h1><h2 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1.构造函数"></a>1.构造函数</h2><p>string();&#x2F;&#x2F;创建一个空的字符串 例如: string str;<br>string(const string&amp; str);&#x2F;&#x2F;使用一个string对象初始化另一个string对象<br>string(const char* s);&#x2F;&#x2F;使用字符串s初始化<br>string(int n, char c);&#x2F;&#x2F;使用n个字符c初始化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s1;</span><br><span class="line"><span class="function">string <span class="title">s2</span><span class="params">(s1)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">s3</span><span class="params">(<span class="string">&quot;fdsjk&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">s4</span><span class="params">(<span class="number">20</span>,<span class="string">&#x27;x&#x27;</span>)</span></span>;</span><br><span class="line">cout&lt;&lt;s3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-基本赋值"><a href="#2-基本赋值" class="headerlink" title="2.基本赋值"></a>2.基本赋值</h2><p>string&amp;operator&#x3D;(const char* s);&#x2F;&#x2F;char*类型字符串 赋值给当前的字符串<br>string&amp;operator&#x3D;(const string&amp;s);&#x2F;&#x2F;把字符串s赋给当前的字符串<br>string&amp;operator&#x3D;(char c);&#x2F;&#x2F;字符赋值给当前的字符串<br>string&amp; assign(const char *s);&#x2F;&#x2F;把字符串s赋给当前的字符串<br>string&amp; assign(const char *s, int n);&#x2F;&#x2F;把字符串s的前n个字符赋给当前的字符串<br>string&amp; assign(const string&amp;s);&#x2F;&#x2F;把字符串s赋给当前字符串<br>string&amp; assign(int n, char c);&#x2F;&#x2F;用n个字符c赋给当前字符串<br>string&amp; assign(const string&amp;s, int start, int n);&#x2F;&#x2F;将s从start开始n个<br>字符赋值给字符串,如s&#x3D;hello,那么n&#x3D;3,start&#x3D;1，那么是hel中从e开始赋值3-1个字符</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1=<span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    string s2=s1;</span><br><span class="line">    string s3;</span><br><span class="line">    s3=<span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    cout&lt;&lt;s3&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    s1.<span class="built_in">assign</span>(<span class="string">&quot;opopop&quot;</span>);</span><br><span class="line">    cout&lt;&lt;s1&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    s2.<span class="built_in">assign</span>(<span class="string">&quot;ioioio&quot;</span>,<span class="number">3</span>);</span><br><span class="line">    cout&lt;&lt;s2&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    s3.<span class="built_in">assign</span>(s2,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    cout&lt;&lt;s3&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-存取字符"><a href="#3-存取字符" class="headerlink" title="3.存取字符"></a>3.存取字符</h2><p>char&amp;operator[](int n);&#x2F;&#x2F;通过[]方式取字符<br>char&amp; at(int n);&#x2F;&#x2F;通过at方法获取字符</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s=<span class="string">&quot;asdfghjkl&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(string::iterator it=s.<span class="built_in">begin</span>();it!=s.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;*it;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;s.<span class="built_in">at</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//[]和at的区别：[]访问元素时，越界不抛异常，直接挂，at越界，会抛异常</span></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">// cout&lt;&lt;s[1000];</span></span><br><span class="line">       s.<span class="built_in">at</span>(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span>(out_of_range &amp;ex)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;ex.<span class="built_in">what</span>()&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;at越界&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-拼接"><a href="#4-拼接" class="headerlink" title="4.拼接"></a>4.拼接</h2><p>string&amp;operator+&#x3D;(const string&amp; str);&#x2F;&#x2F;重载+&#x3D;操作符<br>string&amp;operator+&#x3D;(const char* str);&#x2F;&#x2F;重载+&#x3D;操作符<br>string&amp;operator+&#x3D;(const char c);&#x2F;&#x2F;重载+&#x3D;操作符<br>string&amp; append(const char *s);&#x2F;&#x2F;把字符串s连接到当前字符串结尾<br>string&amp; append(const char *s, int n);&#x2F;&#x2F;把字符串s的前n个字符连接到当前字符串结尾<br>string&amp; append(const string&amp;s);&#x2F;&#x2F;同operator+&#x3D;()<br>string&amp; append(const string&amp;s, int pos, int n);&#x2F;&#x2F;把字符串s中从pos开始的n个字符连接到当前字符串结尾<br>string&amp; append(int n, char c);&#x2F;&#x2F;在当前字符串结尾添加n个字符c</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s=<span class="string">&quot;uuuuuuuuuu&quot;</span>;</span><br><span class="line">    s+=<span class="string">&quot;123&quot;</span>;</span><br><span class="line">    s.<span class="built_in">append</span>(<span class="string">&quot;iiiiiii&quot;</span>,<span class="number">3</span>);</span><br><span class="line">    s.<span class="built_in">append</span>(<span class="string">&quot;yyyyyy&quot;</span>,<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-查找和替换"><a href="#5-查找和替换" class="headerlink" title="5.查找和替换"></a>5.查找和替换</h2><p>int find(const string&amp; str, int pos &#x3D; 0) const; &#x2F;&#x2F;查找str第一次出现位置,从pos开始查找<br>int find(constchar* s, int pos &#x3D; 0) const;  &#x2F;&#x2F;查找s第一次出现位置,从pos开始查找<br>int find(constchar* s, int pos, int n) const;  &#x2F;&#x2F;从pos位置查找s的前n个字符第一次位置<br>int find(constchar c, int pos &#x3D; 0) const;  &#x2F;&#x2F;查找字符c第一次出现位置<br>int rfind(conststring&amp; str, int pos &#x3D; npos) const;&#x2F;&#x2F;查找str最后一次位置,从pos开始查找<br>int rfind(constchar* s, int pos &#x3D; npos) const;&#x2F;&#x2F;查找s最后一次出现位置,从pos开始查找<br>int rfind(constchar* s, int pos, int n) const;&#x2F;&#x2F;从pos查找s的前n个字符最后一次位置<br>int rfind(constchar c, int pos &#x3D; 0) const; &#x2F;&#x2F;查找字符c最后一次出现位置<br>string&amp; replace(int pos, int n, const string&amp; str); &#x2F;&#x2F;替换从pos开始n个字符为字符串str<br>string&amp; replace(int pos, int n, const char* s); &#x2F;&#x2F;替换从pos开始的n个字符为字符串s</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s=<span class="string">&quot;abcdefghijak&quot;</span>;</span><br><span class="line">    cout&lt;&lt;s.<span class="built_in">find</span>(<span class="string">&#x27;f&#x27;</span>)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;s.<span class="built_in">find</span>(<span class="string">&quot;cdiiiii&quot;</span>,<span class="number">0</span>,<span class="number">2</span>)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;s.<span class="built_in">rfind</span>(<span class="string">&#x27;a&#x27;</span>)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    s.<span class="built_in">replace</span>(<span class="number">2</span>,<span class="number">4</span>,<span class="string">&quot;123&quot;</span>);<span class="comment">//将4个元素替换成123</span></span><br><span class="line">    cout&lt;&lt;s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-比较"><a href="#6-比较" class="headerlink" title="6.比较"></a>6.比较</h2><p>compare函数在&gt;时返回 1，&lt;时返回 -1，&#x3D;&#x3D;时返回 0。<br>比较区分大小写，比较时参考字典顺序，排越前面的越小。<br>大写的A比小写的a小。</p>
<p>int compare(const string&amp;s) const;&#x2F;&#x2F;与字符串s比较<br>int compare(const char *s) const;&#x2F;&#x2F;与字符串s比较</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test06</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1=<span class="string">&quot;aaabc&quot;</span>;</span><br><span class="line">    string s2=<span class="string">&quot;aAabc&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;s1.<span class="built_in">compare</span>(s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-子串"><a href="#7-子串" class="headerlink" title="7.子串"></a>7.子串</h2><p>子串<br>string substr(int pos &#x3D; 0, int n &#x3D; npos) const;&#x2F;&#x2F;返回由pos开始的n个字符组成的字符串</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test07</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s=<span class="string">&quot;123456@xx.email&quot;</span>;</span><br><span class="line">    string s1=s.<span class="built_in">substr</span>(<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">    string s2=s.<span class="built_in">substr</span>(<span class="number">7</span>,s.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    cout&lt;&lt;s1&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;s2&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-插入和删除"><a href="#8-插入和删除" class="headerlink" title="8.插入和删除"></a>8.插入和删除</h2><p>string&amp; insert(int pos, const char* s); &#x2F;&#x2F;插入字符串<br>string&amp; insert(int pos, const string&amp; str); &#x2F;&#x2F;插入字符串<br>string&amp; insert(int pos, int n, char c);&#x2F;&#x2F;在指定位置插入n个字符c<br>string&amp; erase(int pos, int n &#x3D; npos);&#x2F;&#x2F;删除从Pos开始的n个字符</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test08</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s=<span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    s.<span class="built_in">insert</span>(<span class="number">3</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    s.<span class="built_in">erase</span>(<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9-string和const-char-转换"><a href="#9-string和const-char-转换" class="headerlink" title="9.string和const char*转换"></a>9.string和const char*转换</h2><p>string和c-style字符串转换</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test09</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s=<span class="string">&quot;12345676678&quot;</span>;</span><br><span class="line">   <span class="type">const</span> <span class="type">char</span>* s1=s.<span class="built_in">c_str</span>();</span><br><span class="line"></span><br><span class="line">   string s2=<span class="built_in">string</span>(s1);</span><br><span class="line">   cout&lt;&lt;s2&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10-用迭代器遍历字符"><a href="#10-用迭代器遍历字符" class="headerlink" title="10.用迭代器遍历字符"></a>10.用迭代器遍历字符</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test10</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s=<span class="string">&quot;9999888777&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(string::iterator it=s.<span class="built_in">begin</span>();it!=s.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;*it;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//反向遍历  反向迭代器string::reverse_iterator</span></span><br><span class="line">    <span class="keyword">for</span>(string::reverse_iterator it=s.<span class="built_in">rbegin</span>();it!=s.<span class="built_in">rend</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">         cout&lt;&lt;*it;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="常用的api中的注意"><a href="#常用的api中的注意" class="headerlink" title="常用的api中的注意"></a>常用的api中的注意</h1><p>1.[]和at区别：[]如果越界，不抛异常，直接挂。at会抛异常</p>
<p>2.字符串内存重新分配，[]和at获取的字符引用，再次使用时，可以能会出错</p>
<p>3.string和char *的区别：string是一个类，char *是一个指针</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s=<span class="string">&quot;123456789&quot;</span>;</span><br><span class="line">    <span class="type">char</span> &amp;a=s[<span class="number">3</span>];<span class="comment">//s[3]返回的是引用</span></span><br><span class="line">    <span class="type">char</span> &amp;b=s[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    a=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    b=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;a:&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;b:&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;s原地址:&quot;</span>&lt;&lt;(<span class="type">int</span>*)s.<span class="built_in">c_str</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;a原地址:&quot;</span>&lt;&lt;(<span class="type">int</span>*)&amp;a&lt;&lt;endl;</span><br><span class="line">    s=<span class="string">&quot;ppppppppppppppppppppppppppp&quot;</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;s新地址:&quot;</span>&lt;&lt;(<span class="type">int</span>*)s.<span class="built_in">c_str</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;a现地址:&quot;</span>&lt;&lt;(<span class="type">int</span>*)&amp;a&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//原空间被释放，如果还是操作a，b则是非法空间操作</span></span><br><span class="line">    a=<span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">    cout&lt;&lt;a;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>STL</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/04/01/%E7%AC%AC02%E7%AB%A0_MySQL%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="第02章-MySQL环境搭建"><a href="#第02章-MySQL环境搭建" class="headerlink" title="第02章_MySQL环境搭建"></a>第02章_MySQL环境搭建</h1><p>讲师：尚硅谷 宋红康（江湖人称：康师傅）</p>
<p>官网：<a href="http://www.atguigu.com/">http://www.atguigu.com</a></p>
<hr>
<h2 id="1-MySQL的卸载"><a href="#1-MySQL的卸载" class="headerlink" title="1. MySQL的卸载"></a>1. MySQL的卸载</h2><h3 id="步骤1：停止MySQL服务"><a href="#步骤1：停止MySQL服务" class="headerlink" title="步骤1：停止MySQL服务"></a>步骤1：停止MySQL服务</h3><p>在卸载之前，先停止MySQL8.0的服务。按键盘上的“Ctrl + Alt + Delete”组合键，打开“任务管理器”对话框，可以在“服务”列表找到“MySQL8.0”的服务，如果现在“正在运行”状态，可以右键单击服务，选择“停止”选项停止MySQL8.0的服务，如图所示。</p>
<p><img src="/images/image-20211014153604802.png" alt="image-20211014153604802" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="步骤2：软件的卸载"><a href="#步骤2：软件的卸载" class="headerlink" title="步骤2：软件的卸载"></a>步骤2：软件的卸载</h3><p><strong>方式1：通过控制面板方式</strong></p>
<p>卸载MySQL8.0的程序可以和其他桌面应用程序一样直接在“控制面板”选择“卸载程序”，并在程序列表中找到MySQL8.0服务器程序，直接双击卸载即可，如图所示。这种方式删除，数据目录下的数据不会跟着删除。</p>
<p><img src="/images/image-20211014153657668.png" alt="image-20211014153657668" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><strong>方式2：通过360或电脑管家等软件卸载</strong></p>
<p>略</p>
<p><strong>方式3：通过安装包提供的卸载功能卸载</strong></p>
<p>你也可以通过安装向导程序进行MySQL8.0服务器程序的卸载。</p>
<p>① 再次双击下载的mysql-installer-community-8.0.26.0.msi文件，打开安装向导。安装向导会自动检测已安装的MySQL服务器程序。</p>
<p>② 选择要卸载的MySQL服务器程序，单击“Remove”（移除），即可进行卸载。</p>
<p><img src="/images/image-20211014153722683.png" alt="image-20211014153722683" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>③ 单击“Next”（下一步）按钮，确认卸载。</p>
<p><img src="/images/image-20211014153747283.png" alt="image-20211014153747283" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>④ 弹出是否同时移除数据目录选择窗口。如果想要同时删除MySQL服务器中的数据，则勾选“Remove the data directory”，如图所示。</p>
<img src="images/image-20211014154112574.png" alt="image-20211014154112574" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>⑤ 执行卸载。单击“Execute”（执行）按钮进行卸载。</p>
<img src="images/image-20211014154006530.png" alt="image-20211014154006530" style="zoom:90%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>⑥ 完成卸载。单击“Finish”（完成）按钮即可。如果想要同时卸载MySQL8.0的安装向导程序，勾选“Yes，Uninstall MySQL Installer”即可，如图所示。</p>
<img src="images/image-20211014154046268.png" alt="image-20211014154046268" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<h3 id="步骤3：残余文件的清理"><a href="#步骤3：残余文件的清理" class="headerlink" title="步骤3：残余文件的清理"></a>步骤3：残余文件的清理</h3><p>如果再次安装不成功，可以卸载后对残余文件进行清理后再安装。</p>
<p>（1）服务目录：mysql服务的安装目录</p>
<p>（2）数据目录：默认在C:\ProgramData\MySQL</p>
<p>如果自己单独指定过数据目录，就找到自己的数据目录进行删除即可。</p>
<blockquote>
<p>注意：请在卸载前做好数据备份</p>
<p>在操作完以后，需要重启计算机，然后进行安装即可。<strong>如果仍然安装失败，需要继续操作如下步骤4。</strong></p>
</blockquote>
<h3 id="步骤4：清理注册表（选做）"><a href="#步骤4：清理注册表（选做）" class="headerlink" title="步骤4：清理注册表（选做）"></a>步骤4：清理注册表（选做）</h3><p>如果前几步做了，再次安装还是失败，那么可以清理注册表。</p>
<p>如何打开注册表编辑器：在系统的搜索框中输入<code>regedit</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Eventlog\Application\MySQL服务 目录删除</span><br><span class="line"></span><br><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\MySQL服务 目录删除</span><br><span class="line"></span><br><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\Eventlog\Application\MySQL服务 目录删除</span><br><span class="line"></span><br><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Services\MySQL服务 目录删除</span><br><span class="line"></span><br><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\MySQL服务目录删除</span><br><span class="line"></span><br><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\MySQL服务删除</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注册表中的ControlSet001,ControlSet002,不一定是001和002,可能是ControlSet005、006之类</p>
</blockquote>
<h3 id="步骤5：删除环境变量配置"><a href="#步骤5：删除环境变量配置" class="headerlink" title="步骤5：删除环境变量配置"></a>步骤5：删除环境变量配置</h3><p>找到path环境变量，将其中关于mysql的环境变量删除，<strong>切记不要全部删除。</strong></p>
<p>例如：删除  D:\develop_tools\mysql\MySQLServer8.0.26\bin;  这个部分</p>
<p><img src="/images/1575694476072.png" alt="1575694476072" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="2-MySQL的下载、安装、配置"><a href="#2-MySQL的下载、安装、配置" class="headerlink" title="2. MySQL的下载、安装、配置"></a>2. MySQL的下载、安装、配置</h2><h3 id="2-1-MySQL的4大版本"><a href="#2-1-MySQL的4大版本" class="headerlink" title="2.1 MySQL的4大版本"></a>2.1 MySQL的4大版本</h3><blockquote>
<ul>
<li><p><strong>MySQL Community Server 社区版本</strong>，开源免费，自由下载，但不提供官方技术支持，适用于大多数普通用户。</p>
</li>
<li><p><strong>MySQL Enterprise Edition 企业版本</strong>，需付费，不能在线下载，可以试用30天。提供了更多的功能和更完备的技术支持，更适合于对数据库的功能和可靠性要求较高的企业客户。</p>
</li>
<li><p><strong>MySQL Cluster 集群版</strong>，开源免费。用于架设集群服务器，可将几个MySQL Server封装成一个Server。需要在社区版或企业版的基础上使用。</p>
</li>
<li><p><strong>MySQL Cluster CGE 高级集群版</strong>，需付费。</p>
</li>
</ul>
</blockquote>
<ul>
<li><p>目前最新版本为<code>8.0.27</code>，发布时间<code>2021年10月</code>。此前，8.0.0 在 2016.9.12日就发布了。</p>
</li>
<li><p>本课程中使用<code>8.0.26版本</code>。</p>
</li>
</ul>
<p>此外，官方还提供了<code>MySQL Workbench</code>（GUITOOL）一款专为MySQL设计的<code>图形界面管理工具</code>。MySQLWorkbench又分为两个版本，分别是<code>社区版</code>（MySQL Workbench OSS）、<code>商用版</code>（MySQL WorkbenchSE）。</p>
<h3 id="2-2-软件的下载"><a href="#2-2-软件的下载" class="headerlink" title="2.2 软件的下载"></a>2.2 软件的下载</h3><p><strong>1. 下载地址</strong></p>
<p>官网：<a href="https://www.mysql.com/">https://www.mysql.com</a></p>
<p><strong>2. 打开官网，点击DOWNLOADS</strong></p>
<p>然后，点击<code>MySQL Community(GPL) Downloads</code></p>
<p><img src="/images/image-20210817185920150.png" alt="image-20210817185920150" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><strong>3. 点击 MySQL Community Server</strong></p>
 <img src="images/image-20210817185955123.png" alt="image-20210817185955123" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p><strong>4. 在General Availability(GA) Releases中选择适合的版本</strong></p>
<p>Windows平台下提供两种安装文件：MySQL二进制分发版（.msi安装文件）和免安装版（.zip压缩文件）。一般来讲，应当使用二进制分发版，因为该版本提供了图形化的安装向导过程，比其他的分发版使用起来要简单，不再需要其他工具启动就可以运行MySQL。</p>
<ul>
<li>这里在Windows 系统下推荐下载<code>MSI安装程序</code>；点击<code>Go to Download Page</code>进行下载即可</li>
</ul>
 <img src="images/image-20210727192819147.png" alt="image-20210727192819147" style="zoom:67%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p> <img src="/images/image-20211014163001964.png" alt="image-20211014163001964" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>Windows下的MySQL8.0安装有两种安装程序<ul>
<li><code>mysql-installer-web-community-8.0.26.0.msi</code> 下载程序大小：2.4M；安装时需要联网安装组件。</li>
<li><code>mysql-installer-community-8.0.26.0.msi</code> 下载程序大小：450.7M；安装时离线安装即可。<strong>推荐。</strong></li>
</ul>
</li>
<li>如果安装MySQL5.7版本的话，选择<code>Archives</code>，接着选择MySQL5.7的相应版本即可。这里下载最近期的MySQL5.7.34版本。</li>
</ul>
<p> <img src="/images/image-20211014163228051.png" alt="image-20211014163228051" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="/images/image-20211014163353156.png" alt="image-20211014163353156" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="2-3-MySQL8-0-版本的安装"><a href="#2-3-MySQL8-0-版本的安装" class="headerlink" title="2.3 MySQL8.0 版本的安装"></a>2.3 MySQL8.0 版本的安装</h3><p>MySQL下载完成后，找到下载文件，双击进行安装，具体操作步骤如下。</p>
<p>步骤1：双击下载的mysql-installer-community-8.0.26.0.msi文件，打开安装向导。</p>
<p>步骤2：打开“Choosing a Setup Type”（选择安装类型）窗口，在其中列出了5种安装类型，分别是Developer Default（默认安装类型）、Server only（仅作为服务器）、Client only（仅作为客户端）、Full（完全安装）、Custom（自定义安装）。这里选择“Custom（自定义安装）”类型按钮，单击“Next(下一步)”按钮。</p>
<img src="images/image-20211014170553535.png" alt="image-20211014170553535" style="zoom:90%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>步骤3：打开“Select Products” （选择产品）窗口，可以定制需要安装的产品清单。例如，选择“MySQL Server 8.0.26-X64”后，单击“→”添加按钮，即可选择安装MySQL服务器，如图所示。采用通用的方法，可以添加其他你需要安装的产品。</p>
<img src="images/image-20211014170638699.png" alt="image-20211014170638699" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>此时如果直接“Next”（下一步），则产品的安装路径是默认的。如果想要自定义安装目录，则可以选中对应的产品，然后在下面会出现“Advanced Options”（高级选项）的超链接。</p>
<img src="images/image-20211014170814386.png" alt="image-20211014170814386" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>单击“Advanced Options”（高级选项）则会弹出安装目录的选择窗口，如图所示，此时你可以分别设置MySQL的服务程序安装目录和数据存储目录。如果不设置，默认分别在C盘的Program Files目录和ProgramData目录（这是一个隐藏目录）。如果自定义安装目录，请避免“中文”目录。另外，建议服务目录和数据目录分开存放。</p>
<img src="images/image-20211014170857263.png" alt="image-20211014170857263" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>步骤4：在上一步选择好要安装的产品之后，单击“Next”（下一步）进入确认窗口，如图所示。单击“Execute”（执行）按钮开始安装。</p>
<img src="images/image-20211014170934889.png" alt="image-20211014170934889" style="zoom:90%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>步骤5：安装完成后在“Status”（状态）列表下将显示“Complete”（安装完成），如图所示。</p>
<img src="images/image-20211014171002259.png" alt="image-20211014171002259" style="zoom:90%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<h3 id="2-4-配置MySQL8-0"><a href="#2-4-配置MySQL8-0" class="headerlink" title="2.4 配置MySQL8.0"></a>2.4 配置MySQL8.0</h3><p>MySQL安装之后，需要对服务器进行配置。具体的配置步骤如下。</p>
<p>步骤1：在上一个小节的最后一步，单击“Next”（下一步）按钮，就可以进入产品配置窗口。</p>
<img src="images/clip_image002-1634203188594.jpg" alt="img" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>步骤2：单击“Next”（下一步）按钮，进入MySQL服务器类型配置窗口，如图所示。端口号一般选择默认端口号3306。</p>
<img src="images/clip_image004-1634203188595.jpg" alt="img" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>其中，“Config Type”选项用于设置服务器的类型。单击该选项右侧的下三角按钮，即可查看3个选项，如图所示。</p>
<img src="images/clip_image006-1634203188595.jpg" alt="img" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<ul>
<li><p><code>Development Machine（开发机器）</code>：该选项代表典型个人用桌面工作站。此时机器上需要运行多个应用程序，那么MySQL服务器将占用最少的系统资源。</p>
</li>
<li><p><code>Server Machine（服务器）</code>：该选项代表服务器，MySQL服务器可以同其他服务器应用程序一起运行，例如Web服务器等。MySQL服务器配置成适当比例的系统资源。</p>
</li>
<li><p><code>Dedicated Machine（专用服务器）</code>：该选项代表只运行MySQL服务的服务器。MySQL服务器配置成使用所有可用系统资源。</p>
</li>
</ul>
<p>步骤3：单击“Next”（下一步）按钮，打开设置授权方式窗口。其中，上面的选项是MySQL8.0提供的新的授权方式，采用SHA256基础的密码加密方法；下面的选项是传统授权方法（保留5.x版本兼容性）。</p>
<img src="images/clip_image008-1634203188595.jpg" alt="img" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>步骤4：单击“Next”（下一步）按钮，打开设置服务器root超级管理员的密码窗口，如图所示，需要输入两次同样的登录密码。也可以通过“Add User”添加其他用户，添加其他用户时，需要指定用户名、允许该用户名在哪台&#x2F;哪些主机上登录，还可以指定用户角色等。此处暂不添加用户，用户管理在MySQL高级特性篇中讲解。</p>
<img src="images/clip_image010-1634203188595.jpg" alt="img" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>步骤5：单击“Next”（下一步）按钮，打开设置服务器名称窗口，如图所示。该服务名会出现在Windows服务列表中，也可以在命令行窗口中使用该服务名进行启动和停止服务。本书将服务名设置为“MySQL80”。如果希望开机自启动服务，也可以勾选“Start the MySQL Server at System Startup”选项（推荐）。</p>
<p>下面是选择以什么方式运行服务？可以选择“Standard System Account”(标准系统用户)或者“Custom User”(自定义用户)中的一个。这里推荐前者。</p>
<img src="images/clip_image012-1634203188596.jpg" alt="img" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>步骤6：单击“Next”（下一步）按钮，打开确认设置服务器窗口，单击“Execute”（执行）按钮。</p>
<img src="images/clip_image014-1634203188596.jpg" alt="img" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>步骤7：完成配置，如图所示。单击“Finish”（完成）按钮，即可完成服务器的配置。</p>
<img src="images/clip_image016.jpg" alt="img" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>步骤8：如果还有其他产品需要配置，可以选择其他产品，然后继续配置。如果没有，直接选择“Next”（下一步），直接完成整个安装和配置过程。</p>
<img src="images/clip_image018.jpg" alt="img" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>步骤9：结束安装和配置。</p>
<img src="images/clip_image020.jpg" alt="img" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<h3 id="2-5-配置MySQL8-0-环境变量"><a href="#2-5-配置MySQL8-0-环境变量" class="headerlink" title="2.5 配置MySQL8.0 环境变量"></a>2.5 配置MySQL8.0 环境变量</h3><p>如果不配置MySQL环境变量，就不能在命令行直接输入MySQL登录命令。下面说如何配置MySQL的环境变量：</p>
<p>步骤1：在桌面上右击【此电脑】图标，在弹出的快捷菜单中选择【属性】菜单命令。<br>步骤2：打开【系统】窗口，单击【高级系统设置】链接。<br>步骤3：打开【系统属性】对话框，选择【高级】选项卡，然后单击【环境变量】按钮。<br>步骤4：打开【环境变量】对话框，在系统变量列表中选择path变量。<br>步骤5：单击【编辑】按钮，在【编辑环境变量】对话框中，将MySQL应用程序的bin目录（C:\Program Files\MySQL\MySQL Server 8.0\bin）添加到变量值中，用分号将其与其他路径分隔开。<br>步骤6：添加完成之后，单击【确定】按钮，这样就完成了配置path变量的操作，然后就可以直接输入MySQL命令来登录数据库了。</p>
<h3 id="2-6-MySQL5-7-版本的安装、配置"><a href="#2-6-MySQL5-7-版本的安装、配置" class="headerlink" title="2.6 MySQL5.7 版本的安装、配置"></a>2.6 MySQL5.7 版本的安装、配置</h3><ul>
<li><strong>安装</strong></li>
</ul>
<p>此版本的安装过程与上述过程除了版本号不同之外，其它环节都是相同的。所以这里省略了MySQL5.7.34版本的安装截图。</p>
<ul>
<li><strong>配置</strong></li>
</ul>
<p>配置环节与MySQL8.0版本确有细微不同。大部分情况下直接选择“Next”即可，不影响整理使用。</p>
<p>这里配置MySQL5.7时，重点强调：<strong>与前面安装好的MySQL8.0不能使用相同的端口号。</strong></p>
<h3 id="2-7-安装失败问题"><a href="#2-7-安装失败问题" class="headerlink" title="2.7 安装失败问题"></a>2.7 安装失败问题</h3><p>MySQL的安装和配置是一件非常简单的事，但是在操作过程中也可能出现问题，特别是初学者。</p>
<p><strong>问题1：无法打开MySQL8.0软件安装包或者安装过程中失败，如何解决？</strong></p>
<p>在运行MySQL8.0软件安装包之前，用户需要确保系统中已经安装了.Net Framework相关软件，如果缺少此软件，将不能正常地安装MySQL8.0软件。</p>
<img src="images/clip_image002.gif" alt="img" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>解决方案：到这个地址<a href="https://www.microsoft.com/en-us/download/details.aspx?id=42642%E4%B8%8B%E8%BD%BDMicrosoft">https://www.microsoft.com/en-us/download/details.aspx?id=42642下载Microsoft</a> .NET Framework 4.5并安装后，再去安装MySQL。</p>
<p>另外，还要确保Windows Installer正常安装。windows上安装mysql8.0需要操作系统提前已安装好Microsoft Visual C++ 2015-2019。</p>
<img src="images/clip_image004.gif" alt="img" style="zoom:75%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<img src="images/clip_image006.gif" alt="img" style="zoom:75%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>解决方案同样是，提前到微软官网<a href="https://support.microsoft.com/en-us/topic/the-latest-supported-visual-c-downloads-2647da03-1eea-4433-9aff-95f26a218cc0%EF%BC%8C%E4%B8%8B%E8%BD%BD%E7%9B%B8%E5%BA%94%E7%9A%84%E7%8E%AF%E5%A2%83%E3%80%82">https://support.microsoft.com/en-us/topic/the-latest-supported-visual-c-downloads-2647da03-1eea-4433-9aff-95f26a218cc0，下载相应的环境。</a></p>
<p><strong>问题2：卸载重装MySQL失败？</strong></p>
<p>该问题通常是因为MySQL卸载时，没有完全清除相关信息导致的。</p>
<p>解决办法是，把以前的安装目录删除。如果之前安装并未单独指定过服务安装目录，则默认安装目录是“C:\Program Files\MySQL”，彻底删除该目录。同时删除MySQL的Data目录，如果之前安装并未单独指定过数据目录，则默认安装目录是“C:\ProgramData\MySQL”，该目录一般为隐藏目录。删除后，重新安装即可。</p>
<p><strong>问题3：如何在Windows系统删除之前的未卸载干净的MySQL服务列表？</strong></p>
<p>操作方法如下，在系统“搜索框”中输入“cmd”，按“Enter”（回车）键确认，弹出命令提示符界面。然后输入“sc delete MySQL服务名”,按“Enter”（回车）键，就能彻底删除残余的MySQL服务了。</p>
<h2 id="3-MySQL的登录"><a href="#3-MySQL的登录" class="headerlink" title="3. MySQL的登录"></a>3. MySQL的登录</h2><h3 id="3-1-服务的启动与停止"><a href="#3-1-服务的启动与停止" class="headerlink" title="3.1 服务的启动与停止"></a>3.1 服务的启动与停止</h3><p>MySQL安装完毕之后，需要启动服务器进程，不然客户端无法连接数据库。</p>
<p>在前面的配置过程中，已经将MySQL安装为Windows服务，并且勾选当Windows启动、停止时，MySQL也自动启动、停止。</p>
<h4 id="方式1：使用图形界面工具"><a href="#方式1：使用图形界面工具" class="headerlink" title="方式1：使用图形界面工具"></a>方式1：使用图形界面工具</h4><ul>
<li><p>步骤1：打开windows服务</p>
<ul>
<li>方式1：计算机（点击鼠标右键）→ 管理（点击）→ 服务和应用程序（点击）→ 服务（点击）</li>
<li>方式2：控制面板（点击）→ 系统和安全（点击）→ 管理工具（点击）→ 服务（点击）</li>
<li>方式3：任务栏（点击鼠标右键）→ 启动任务管理器（点击）→ 服务（点击）</li>
<li>方式4：单击【开始】菜单，在搜索框中输入“services.msc”，按Enter键确认</li>
</ul>
</li>
<li><p>步骤2：找到MySQL80（点击鼠标右键）→ 启动或停止（点击）</p>
</li>
</ul>
<p><img src="/images/image-20211014183908375.png" alt="image-20211014183908375" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h4 id="方式2：使用命令行工具"><a href="#方式2：使用命令行工具" class="headerlink" title="方式2：使用命令行工具"></a>方式2：使用命令行工具</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动 MySQL 服务命令：</span><br><span class="line">net start MySQL服务名</span><br><span class="line"></span><br><span class="line"># 停止 MySQL 服务命令：</span><br><span class="line">net stop MySQL服务名</span><br></pre></td></tr></table></figure>

<img src="images/image-20211014184037414.png" alt="image-20211014184037414" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>说明：</p>
<ol>
<li><p>start和stop后面的服务名应与之前配置时指定的服务名一致。</p>
</li>
<li><p>如果当你输入命令后，提示“拒绝服务”，请以<code>系统管理员身份</code>打开命令提示符界面重新尝试。</p>
</li>
</ol>
<h3 id="3-2-自带客户端的登录与退出"><a href="#3-2-自带客户端的登录与退出" class="headerlink" title="3.2 自带客户端的登录与退出"></a>3.2 自带客户端的登录与退出</h3><p>当MySQL服务启动完成后，便可以通过客户端来登录MySQL数据库。注意：确认服务是开启的。</p>
<h4 id="登录方式1：MySQL自带客户端"><a href="#登录方式1：MySQL自带客户端" class="headerlink" title="登录方式1：MySQL自带客户端"></a>登录方式1：MySQL自带客户端</h4><p>开始菜单 → 所有程序 → MySQL → MySQL 8.0 Command Line Client</p>
<img src="images/image-20211014184425147.png" alt="image-20211014184425147" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<blockquote>
<p>说明：仅限于root用户</p>
</blockquote>
<h4 id="登录方式2：windows命令行"><a href="#登录方式2：windows命令行" class="headerlink" title="登录方式2：windows命令行"></a>登录方式2：windows命令行</h4><ul>
<li>格式：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -h 主机名 -P 端口号 -u 用户名 -p密码</span><br></pre></td></tr></table></figure>

<ul>
<li>举例：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -h localhost -P 3306 -u root -pabc123  # 这里我设置的root用户的密码是abc123</span><br></pre></td></tr></table></figure>

<img src="images/image-20211014185035137.png" alt="image-20211014185035137" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>注意：</p>
<p>（1）-p与密码之间不能有空格，其他参数名与参数值之间可以有空格也可以没有空格。如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>hlocalhost <span class="operator">-</span>P3306 <span class="operator">-</span>uroot <span class="operator">-</span>pabc123</span><br></pre></td></tr></table></figure>

<p>（2）密码建议在下一行输入，保证安全</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>h localhost <span class="operator">-</span>P <span class="number">3306</span> <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line">Enter password:<span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure>

<p>（3）客户端和服务器在同一台机器上，所以输入localhost或者IP地址127.0.0.1。同时，因为是连接本机：<br>-hlocalhost就可以省略，如果端口号没有修改：-P3306也可以省略</p>
<p>  简写成：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br><span class="line">Enter password:<span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure>

<p>连接成功后，有关于MySQL Server服务版本的信息，还有第几次连接的id标识。</p>
<p>也可以在命令行通过以下方式获取MySQL Server服务版本的信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c:\&gt; mysql -V</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c:\&gt; mysql --version</span><br></pre></td></tr></table></figure>

<p>或<strong>登录</strong>后，通过以下方式查看当前版本信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select version();</span><br></pre></td></tr></table></figure>

<h4 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit</span><br><span class="line">或</span><br><span class="line">quit</span><br></pre></td></tr></table></figure>

<h2 id="4-MySQL演示使用"><a href="#4-MySQL演示使用" class="headerlink" title="4. MySQL演示使用"></a>4. MySQL演示使用</h2><h3 id="4-1-MySQL的使用演示"><a href="#4-1-MySQL的使用演示" class="headerlink" title="4.1 MySQL的使用演示"></a>4.1 MySQL的使用演示</h3><p>1、查看所有的数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>“information_schema”是 MySQL 系统自带的数据库，主要保存 MySQL 数据库服务器的系统信息，比如数据库的名称、数据表的名称、字段名称、存取权限、数据文件 所在的文件夹和系统使用的文件夹，等等</p>
<p>“performance_schema”是 MySQL 系统自带的数据库，可以用来监控 MySQL 的各类性能指标。 </p>
<p>“sys”数据库是 MySQL 系统自带的数据库，主要作用是以一种更容易被理解的方式展示 MySQL 数据库服务器的各类性能指标，帮助系统管理员和开发人员监控 MySQL 的技术性能。 </p>
<p>“mysql”数据库保存了 MySQL 数据库服务器运行时需要的系统信息，比如数据文件夹、当前使用的字符集、约束检查信息，等等</p>
</blockquote>
<p>为什么 Workbench 里面我们只能看到“demo”和“sys”这 2 个数据库呢？ </p>
<p>这是因为，Workbench 是图形化的管理工具，主要面向开发人 员，“demo”和“sys”这 2 个数据库已经够用了。如果有特殊需求，比如，需要监控 MySQL 数据库各项性能指标、直接操作 MySQL 数据库系统文件等，可以由 DBA 通过 SQL 语句，查看其它的系统数据库。</p>
<p>2、创建自己的数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database 数据库名;</span><br><span class="line"></span><br><span class="line">#创建atguigudb数据库，该名称不能与已经存在的数据库重名。</span><br><span class="line">create database atguigudb;</span><br></pre></td></tr></table></figure>

<p>3、使用自己的数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use 数据库名;</span><br><span class="line"></span><br><span class="line">#使用atguigudb数据库</span><br><span class="line">use atguigudb;</span><br></pre></td></tr></table></figure>

<p>说明：如果没有使用use语句，后面针对数据库的操作也没有加“数据名”的限定，那么会报“ERROR 1046 (3D000): No database selected”（没有选择数据库）</p>
<p>使用完use语句之后，如果接下来的SQL都是针对一个数据库操作的，那就不用重复use了，如果要针对另一个数据库操作，那么要重新use。</p>
<p>4、查看某个库的所有表格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables;  #要求前面有use语句</span><br><span class="line"></span><br><span class="line">show tables from 数据库名;</span><br></pre></td></tr></table></figure>

<p>5、创建新的表格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名称(</span><br><span class="line">	字段名  数据类型,</span><br><span class="line">	字段名 数据类型</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>说明：如果是最后一个字段，后面就用加逗号，因为逗号的作用是分割每个字段。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建学生表</span><br><span class="line">create table student(</span><br><span class="line">	id int,</span><br><span class="line">    name varchar(20)  #说名字最长不超过20个字符</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>6、查看一个表的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 数据库表名称;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看学生表的数据</span><br><span class="line">select * from student;</span><br></pre></td></tr></table></figure>

<p>7、添加一条记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名称 values(值列表);</span><br><span class="line"></span><br><span class="line">#添加两条记录到student表中</span><br><span class="line">insert into student values(1,&#x27;张三&#x27;);</span><br><span class="line">insert into student values(2,&#x27;李四&#x27;);</span><br></pre></td></tr></table></figure>

<p>报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into student values(1,&#x27;张三&#x27;);</span><br><span class="line">ERROR 1366 (HY000): Incorrect string value: &#x27;\xD5\xC5\xC8\xFD&#x27; for column &#x27;name&#x27; at row 1</span><br><span class="line">mysql&gt; insert into student values(2,&#x27;李四&#x27;);</span><br><span class="line">ERROR 1366 (HY000): Incorrect string value: &#x27;\xC0\xEE\xCB\xC4&#x27; for column &#x27;name&#x27; at row 1</span><br><span class="line">mysql&gt; show create table student;</span><br></pre></td></tr></table></figure>

<p>字符集的问题。</p>
<p>8、查看表的创建信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table 表名称\G</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查看student表的详细创建信息</span><br><span class="line">show create table student\G</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#结果如下</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: student</span><br><span class="line">Create Table: CREATE TABLE `student` (</span><br><span class="line">  `id` int(11) DEFAULT NULL,</span><br><span class="line">  `name` varchar(20) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=latin1</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>上面的结果显示student的表格的默认字符集是“latin1”不支持中文。</p>
<p>9、查看数据库的创建信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create database 数据库名\G</span><br><span class="line"></span><br><span class="line">#查看atguigudb数据库的详细创建信息</span><br><span class="line">show create database atguigudb\G</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#结果如下</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Database: atguigudb</span><br><span class="line">Create Database: CREATE DATABASE `atguigudb` /*!40100 DEFAULT CHARACTER SET latin1 */</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>上面的结果显示atguigudb数据库也不支持中文，字符集默认是latin1。</p>
<p>10、删除表格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table 表名称;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#删除学生表</span><br><span class="line">drop table student;</span><br></pre></td></tr></table></figure>

<p>11、删除数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database 数据库名;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#删除atguigudb数据库</span><br><span class="line">drop database atguigudb;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-MySQL的编码设置"><a href="#4-2-MySQL的编码设置" class="headerlink" title="4.2 MySQL的编码设置"></a>4.2 MySQL的编码设置</h3><h4 id="MySQL5-7中"><a href="#MySQL5-7中" class="headerlink" title="MySQL5.7中"></a>MySQL5.7中</h4><p><strong>问题再现：命令行操作sql乱码问题</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO t_stu VALUES(1,&#x27;张三&#x27;,&#x27;男&#x27;);</span><br><span class="line">ERROR 1366 (HY000): Incorrect string value: &#x27;\xD5\xC5\xC8\xFD&#x27; for column &#x27;sname&#x27; at row 1</span><br></pre></td></tr></table></figure>

<p><strong>问题解决</strong></p>
<p>步骤1：查看编码命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;character_%&#x27;;</span><br><span class="line">show variables like &#x27;collation_%&#x27;;</span><br></pre></td></tr></table></figure>

<p>步骤2：修改mysql的数据目录下的my.ini配置文件</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysql]</span>  <span class="comment">#大概在63行左右，在其下添加</span></span><br><span class="line">... </span><br><span class="line"><span class="attr">default-character-set</span>=utf8  <span class="comment">#默认字符集</span></span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld]</span>  <span class="comment"># 大概在76行左右，在其下添加</span></span><br><span class="line">...</span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="attr">collation-server</span>=utf8_general_ci</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：建议修改配置文件使用notepad++等高级文本编辑器，使用记事本等软件打开修改后可能会导致文件编码修改为“含BOM头”的编码，从而服务重启失败。</p>
</blockquote>
<p>步骤3：重启服务</p>
<p>步骤4：查看编码命令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;character_%&#x27;</span>;</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;collation_%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<img src="images/MySQL编码1.jpg" style="zoom:90%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<img src="images/MySQL编码2.jpg" style="zoom:90%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<ul>
<li>如果是以上配置就说明对了。接着我们就可以新创建数据库、新创建数据表，接着添加包含中文的数据了。</li>
</ul>
<h4 id="MySQL8-0中"><a href="#MySQL8-0中" class="headerlink" title="MySQL8.0中"></a>MySQL8.0中</h4><p>在MySQL 8.0版本之前，默认字符集为latin1，utf8字符集指向的是utf8mb3。网站开发人员在数据库设计的时候往往会将编码修改为utf8字符集。如果遗忘修改默认的编码，就会出现乱码的问题。从MySQL 8.0开始，数据库的默认编码改为<code>utf8mb4</code>，从而避免了上述的乱码问题。</p>
<h2 id="5-MySQL图形化管理工具"><a href="#5-MySQL图形化管理工具" class="headerlink" title="5. MySQL图形化管理工具"></a>5. MySQL图形化管理工具</h2><p>MySQL图形化管理工具极大地方便了数据库的操作与管理，常用的图形化管理工具有：MySQL Workbench、phpMyAdmin、Navicat Preminum、MySQLDumper、SQLyog、dbeaver、MySQL ODBC Connector。</p>
<h3 id="工具1-MySQL-Workbench"><a href="#工具1-MySQL-Workbench" class="headerlink" title="工具1. MySQL Workbench"></a>工具1. MySQL Workbench</h3><p>MySQL官方提供的图形化管理工具MySQL Workbench完全支持MySQL 5.0以上的版本。MySQL Workbench分为社区版和商业版，社区版完全免费，而商业版则是按年收费。</p>
<p>MySQL Workbench 为数据库管理员、程序开发者和系统规划师提供可视化设计、模型建立、以及数据库管理功能。它包含了用于创建复杂的数据建模ER模型，正向和逆向数据库工程，也可以用于执行通常需要花费大量时间的、难以变更和管理的文档任务。</p>
<p>下载地址：<a href="http://dev.mysql.com/downloads/workbench/%E3%80%82">http://dev.mysql.com/downloads/workbench/。</a></p>
<p>使用：</p>
<p>首先，我们点击 Windows 左下角的“开始”按钮，如果你是 Win10 系统，可以直接看到所有程序。接着，找到“MySQL”，点开，找到“MySQL Workbench 8.0 CE”。点击打开 Workbench，如下图所示：</p>
<p><img src="/images/image-20211007153522427.png" alt="image-20211007153522427" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>左下角有个本地连接，点击，录入 Root 的密码，登录本地 MySQL 数据库服务器，如下图所示：</p>
<img src="images/image-20211014195108502.png" alt="image-20211014195108502" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<img src="images/image-20211014195129219.png" alt="image-20211014195129219" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<img src="images/image-20211014195142849.png" alt="image-20211014195142849" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>这是一个图形化的界面，我来给你介绍下这个界面。 </p>
<ul>
<li><p>上方是菜单。左上方是导航栏，这里我们可以看到 MySQL 数据库服务器里面的数据 库，包括数据表、视图、存储过程和函数；左下方是信息栏，可以显示上方选中的数据 库、数据表等对象的信息。 </p>
</li>
<li><p>中间上方是工作区，你可以在这里写 SQL 语句，点击上方菜单栏左边的第三个运行按 钮，就可以执行工作区的 SQL 语句了。 </p>
</li>
<li><p>中间下方是输出区，用来显示 SQL 语句的运行情况，包括什么时间开始运行的、运行的 内容、运行的输出，以及所花费的时长等信息。</p>
</li>
</ul>
<p>好了，下面我们就用 Workbench 实际创建一个数据库，并且导入一个 Excel 数据文件， 来生成一个数据表。数据表是存储数据的载体，有了数据表以后，我们就能对数据进行操作了。 </p>
<h3 id="工具2-Navicat"><a href="#工具2-Navicat" class="headerlink" title="工具2. Navicat"></a>工具2. Navicat</h3><p>Navicat MySQL是一个强大的MySQL数据库服务器管理和开发工具。它可以与任何3.21或以上版本的MySQL一起工作，支持触发器、存储过程、函数、事件、视图、管理用户等，对于新手来说易学易用。其精心设计的图形用户界面（GUI）可以让用户用一种安全简便的方式来快速方便地创建、组织、访问和共享信息。Navicat支持中文，有免费版本提供。<br>下载地址：<a href="http://www.navicat.com/%E3%80%82">http://www.navicat.com/。</a></p>
<img src="images/1557378069584.png" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<img src="images/image-20210913180359685.png" alt="image-20210913180359685" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<h3 id="工具3-SQLyog"><a href="#工具3-SQLyog" class="headerlink" title="工具3. SQLyog"></a>工具3. SQLyog</h3><p>SQLyog 是业界著名的 Webyog 公司出品的一款简洁高效、功能强大的图形化 MySQL 数据库管理工具。这款工具是使用C++语言开发的。该工具可以方便地创建数据库、表、视图和索引等，还可以方便地进行插入、更新和删除等操作，同时可以方便地进行数据库、数据表的备份和还原。该工具不仅可以通过SQL文件进行大量文件的导入和导出，还可以导入和导出XML、HTML和CSV等多种格式的数据。<br>下载地址：<a href="http://www.webyog.com/%EF%BC%8C%E8%AF%BB%E8%80%85%E4%B9%9F%E5%8F%AF%E4%BB%A5%E6%90%9C%E7%B4%A2%E4%B8%AD%E6%96%87%E7%89%88%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%E3%80%82">http://www.webyog.com/，读者也可以搜索中文版的下载地址。</a></p>
<img src="images/image-20211014213018979.png" alt="image-20211014213018979" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<img src="images/image-20211014213036470.png" alt="image-20211014213036470" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<h3 id="工具4：dbeaver"><a href="#工具4：dbeaver" class="headerlink" title="工具4：dbeaver"></a>工具4：dbeaver</h3><p>DBeaver是一个通用的数据库管理工具和 SQL 客户端，支持所有流行的数据库：MySQL、PostgreSQL、SQLite、Oracle、DB2、SQL Server、 Sybase、MS Access、Teradata、 Firebird、Apache Hive、Phoenix、Presto等。DBeaver比大多数的SQL管理工具要轻量，而且支持中文界面。DBeaver社区版作为一个免费开源的产品，和其他类似的软件相比，在功能和易用性上都毫不逊色。</p>
<p>唯一需要注意是 DBeaver 是用Java编程语言开发的，所以需要拥有 JDK（Java Development ToolKit）环境。如果电脑上没有JDK，在选择安装DBeaver组件时，勾选“Include Java”即可。</p>
<p>下载地址：<a href="https://dbeaver.io/download/">https://dbeaver.io/download/</a></p>
<img src="images/image-20211014195237457.png" alt="image-20211014195237457" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<img src="images/image-20211014195251371.png" alt="image-20211014195251371" style="zoom:75%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<img src="images/image-20211014195300510.png" alt="image-20211014195300510" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<img src="images/image-20211014195309805.png" alt="image-20211014195309805" style="zoom:70%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<h3 id="可能出现连接问题："><a href="#可能出现连接问题：" class="headerlink" title="可能出现连接问题："></a>可能出现连接问题：</h3><p>有些图形界面工具，特别是旧版本的图形界面工具，在连接MySQL8时出现“Authentication plugin ‘caching_sha2_password’ cannot be loaded”错误。</p>
<img src="images/image-20211019215249254.png" alt="image-20211019215249254" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>

<p>出现这个原因是MySQL8之前的版本中加密规则是mysql_native_password，而在MySQL8之后，加密规则是caching_sha2_password。解决问题方法有两种，第一种是升级图形界面工具版本，第二种是把MySQL8用户登录密码加密规则还原成mysql_native_password。</p>
<p>第二种解决方案如下，用命令行登录MySQL数据库之后，执行如下命令修改用户密码加密规则并更新用户密码，这里修改用户名为“root@localhost”的用户密码规则为“mysql_native_password”，密码值为“123456”，如图所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#使用mysql数据库</span><br><span class="line">USE mysql; </span><br><span class="line"></span><br><span class="line">#修改&#x27;root&#x27;@&#x27;localhost&#x27;用户的密码规则和密码</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;abc123&#x27;; </span><br><span class="line"></span><br><span class="line">#刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<img src="images/image-20211019215408965.png" alt="image-20211019215408965" style="zoom:80%;"  loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'/>



<h2 id="6-MySQL目录结构与源码"><a href="#6-MySQL目录结构与源码" class="headerlink" title="6. MySQL目录结构与源码"></a>6. MySQL目录结构与源码</h2><h3 id="6-1-主要目录结构"><a href="#6-1-主要目录结构" class="headerlink" title="6.1 主要目录结构"></a>6.1 主要目录结构</h3><table>
<thead>
<tr>
<th>MySQL的目录结构</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>bin目录</td>
<td>所有MySQL的可执行文件。如：mysql.exe</td>
</tr>
<tr>
<td>MySQLInstanceConfig.exe</td>
<td>数据库的配置向导，在安装时出现的内容</td>
</tr>
<tr>
<td>data目录</td>
<td>系统数据库所在的目录</td>
</tr>
<tr>
<td>my.ini文件</td>
<td>MySQL的主要配置文件</td>
</tr>
<tr>
<td>c:\ProgramData\MySQL\MySQL Server 8.0\data\</td>
<td>用户创建的数据库所在的目录</td>
</tr>
</tbody></table>
<h3 id="6-2-MySQL-源代码获取"><a href="#6-2-MySQL-源代码获取" class="headerlink" title="6.2 MySQL 源代码获取"></a>6.2 MySQL 源代码获取</h3><p>首先，你要进入 MySQL下载界面。 这里你不要选择用默认的“Microsoft Windows”，而是要通过下拉栏，找到“Source Code”，在下面的操作系统版本里面， 选择 Windows（Architecture Independent），然后点击下载。 </p>
<p>接下来，把下载下来的压缩文件解压，我们就得到了 MySQL 的源代码。</p>
<p>MySQL 是用 C++ 开发而成的，我简单介绍一下源代码的组成。 </p>
<p>mysql-8.0.22 目录下的各个子目录，包含了 MySQL 各部分组件的源代码： </p>
<p><img src="/images/image-20211007154113052.png" alt="image-20211007154113052" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li><p>sql 子目录是 MySQL 核心代码；</p>
</li>
<li><p>libmysql 子目录是客户端程序 API；</p>
</li>
<li><p>mysql-test 子目录是测试工具；</p>
</li>
<li><p>mysys 子目录是操作系统相关函数和辅助函数；</p>
</li>
</ul>
<p>源代码可以用记事本打开查看，如果你有 C++ 的开发环境，也可以在开发环境中打开查看。 </p>
<p><img src="/images/image-20211007154213156.png" alt="image-20211007154213156" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>如上图所示，源代码并不神秘，就是普通的 C++ 代码，跟你熟悉的一样，而且有很多注释，可以帮助你理解。阅读源代码就像在跟 MySQL 的开发人员对话一样，十分有趣。</p>
<h2 id="7-常见问题的解决-课外内容"><a href="#7-常见问题的解决-课外内容" class="headerlink" title="7. 常见问题的解决(课外内容)"></a>7. 常见问题的解决(课外内容)</h2><h3 id="问题1：root用户密码忘记，重置的操作"><a href="#问题1：root用户密码忘记，重置的操作" class="headerlink" title="问题1：root用户密码忘记，重置的操作"></a>问题1：root用户密码忘记，重置的操作</h3><p>1: 通过任务管理器或者服务管理，关掉mysqld(服务进程)<br>2: 通过命令行+特殊参数开启mysqld<br>mysqld –defaults-file&#x3D;”D:\ProgramFiles\mysql\MySQLServer5.7Data\my.ini” –skip-grant-tables</p>
<p>3: 此时，mysqld服务进程已经打开。并且不需要权限检查<br>4: mysql -uroot 无密码登陆服务器。另启动一个客户端进行<br>5: 修改权限表<br>（1） use mysql;<br>（2）update user set authentication_string&#x3D;password(‘新密码’) where user&#x3D;’root’ and Host&#x3D;’localhost’;<br>（3）flush privileges;<br>6: 通过任务管理器，关掉mysqld服务进程。<br>7: 再次通过服务管理，打开mysql服务。<br>8: 即可用修改后的新密码登陆。</p>
<h3 id="问题2：mysql命令报“不是内部或外部命令”"><a href="#问题2：mysql命令报“不是内部或外部命令”" class="headerlink" title="问题2：mysql命令报“不是内部或外部命令”"></a>问题2：mysql命令报“不是内部或外部命令”</h3><p>如果输入mysql命令报“不是内部或外部命令”，把mysql安装目录的bin目录配置到环境变量path中。如下：</p>
<p><img src="/images/image-20210914093150145.png" alt="image-20210914093150145" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="问题3：错误ERROR-：没有选择数据库就操作表格和数据"><a href="#问题3：错误ERROR-：没有选择数据库就操作表格和数据" class="headerlink" title="问题3：错误ERROR ：没有选择数据库就操作表格和数据"></a>问题3：错误ERROR ：没有选择数据库就操作表格和数据</h3><table>
<thead>
<tr>
<th>ERROR 1046 (3D000): No database selected</th>
</tr>
</thead>
<tbody><tr>
<td>解决方案一：就是使用“USE 数据库名;”语句，这样接下来的语句就默认针对这个数据库进行操作</td>
</tr>
<tr>
<td>解决方案二：就是所有的表对象前面都加上“数据库.”</td>
</tr>
</tbody></table>
<h3 id="问题4：命令行客户端的字符集问题"><a href="#问题4：命令行客户端的字符集问题" class="headerlink" title="问题4：命令行客户端的字符集问题"></a>问题4：命令行客户端的字符集问题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO t_stu VALUES(1,&#x27;张三&#x27;,&#x27;男&#x27;);</span><br><span class="line">ERROR 1366 (HY000): Incorrect string value: &#x27;\xD5\xC5\xC8\xFD&#x27; for column &#x27;sname&#x27; at row 1</span><br></pre></td></tr></table></figure>

<p>原因：服务器端认为你的客户端的字符集是utf-8，而实际上你的客户端的字符集是GBK。</p>
<p><img src="/images/1554912924219.png" alt="1554912924219" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>查看所有字符集：<strong>SHOW VARIABLES LIKE ‘character_set_%’;</strong></p>
<p><img src="/images/1554912943186.png" alt="1554912943186" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>解决方案，设置当前连接的客户端字符集 <strong>“SET NAMES GBK;”</strong></p>
<p><img src="/images/1554912957353.png" alt="1554912957353" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="问题5：修改数据库和表的字符编码"><a href="#问题5：修改数据库和表的字符编码" class="headerlink" title="问题5：修改数据库和表的字符编码"></a>问题5：修改数据库和表的字符编码</h3><p>修改编码：</p>
<p>（1)先停止服务，（2）修改my.ini文件（3）重新启动服务</p>
<p>说明：</p>
<p>如果是在修改my.ini之前建的库和表，那么库和表的编码还是原来的Latin1，要么删了重建，要么使用alter语句修改编码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database 0728db charset Latin1;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; use 0728db;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table student (id int , name varchar(20)) charset Latin1;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; show create table student\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: student</span><br><span class="line">Create Table: CREATE TABLE `student` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `name` varchar(20) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=latin1</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table student charset utf8; #修改表字符编码为UTF8</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; show create table student\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: student</span><br><span class="line">Create Table: CREATE TABLE `student` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `name` varchar(20) CHARACTER SET latin1 DEFAULT NULL,  #字段仍然是latin1编码</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; alter table student modify name varchar(20) charset utf8; #修改字段字符编码为UTF8</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; show create table student\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: student</span><br><span class="line">Create Table: CREATE TABLE `student` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `name` varchar(20) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show create database 0728db;;</span><br><span class="line">+--------+-----------------------------------------------------------------+</span><br><span class="line">|Database| Create Database                                                 |</span><br><span class="line">+------+-------------------------------------------------------------------+</span><br><span class="line">|0728db| CREATE DATABASE `0728db` /*!40100 DEFAULT CHARACTER SET latin1 */ |</span><br><span class="line">+------+-------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; alter database 0728db charset utf8; #修改数据库的字符编码为utf8</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; show create database 0728db;</span><br><span class="line">+--------+-----------------------------------------------------------------+</span><br><span class="line">|Database| Create Database                                                 |</span><br><span class="line">+--------+-----------------------------------------------------------------+</span><br><span class="line">| 0728db | CREATE DATABASE `0728db` /*!40100 DEFAULT CHARACTER SET utf8 */ |</span><br><span class="line">+--------+-----------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
</search>
